<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_integration_2test__blockdevice_8c_source" xml:lang="en-US">
<title>test_blockdevice.c</title>
<indexterm><primary>lib/pico-vfs-REGI-Local/tests/integration/test_blockdevice.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_integration_2test__blockdevice_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;hardware/clocks.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_flash_8h">blockdevice/flash.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_heap_8h">blockdevice/heap.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_loopback_8h">blockdevice/loopback.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_sd_8h">blockdevice/sd.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_fat_8h">filesystem/fat.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_vfs_8h">filesystem/vfs.h</link>&quot;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00012"/>00012 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00013"/><link linkend="_integration_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">00013</link> <emphasis role="preprocessor">#define&#32;COLOR_GREEN(format)&#32;&#32;(&quot;\e[32m&quot;&#32;format&#32;&quot;\e[0m&quot;)</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00014"/><link linkend="_integration_2test__blockdevice_8c_1ae38550b2008b82c08588d2340f196914">00014</link> <emphasis role="preprocessor">#define&#32;FLASH_START_AT&#32;&#32;&#32;&#32;&#32;&#32;&#32;(0.5&#32;*&#32;1024&#32;*&#32;1024)</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00015"/><link linkend="_integration_2test__blockdevice_8c_1a1f06fce82ce957c8dd28c5e07da29d97">00015</link> <emphasis role="preprocessor">#define&#32;FLASH_LENGTH_ALL&#32;&#32;&#32;&#32;&#32;0</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00016"/><link linkend="_integration_2test__blockdevice_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">00016</link> <emphasis role="preprocessor">#define&#32;HEAP_STORAGE_SIZE&#32;&#32;&#32;&#32;(512&#32;*&#32;128)&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;64KB</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00017"/><link linkend="_integration_2test__blockdevice_8c_1ab0b32c3001dc854345376d139b2fc9d4">00017</link> <emphasis role="preprocessor">#define&#32;LOOPBACK_STORAGE_SIZE&#32;&#32;1024</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00018"/><link linkend="_integration_2test__blockdevice_8c_1ab8c390e6f53017179ae00255cd27fd11">00018</link> <emphasis role="preprocessor">#define&#32;LOOPBACK_BLOCK_SIZE&#32;&#32;&#32;&#32;512</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00019"/>00019 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;ctype.h&gt;</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00021"/>00021 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;print_hex(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*label,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*buffer,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;*buf&#32;=&#32;buffer;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00023"/>00023 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;%s:\n&quot;</emphasis>,&#32;label);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset&#32;=&#32;0;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;++i)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;16&#32;==&#32;0)
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;0x%04u%s&quot;</emphasis>,&#32;offset,&#32;(i&#32;%&#32;512)&#32;==&#32;0&#32;?&#32;<emphasis role="stringliteral">&quot;&gt;&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isalnum(buf[i]))&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&apos;%c&apos;&#32;&quot;</emphasis>,&#32;buf[i]);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;0x%02x&quot;</emphasis>,&#32;buf[i]);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;16&#32;==&#32;15)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;offset&#32;+=&#32;16;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00039"/>00039 &#32;&#32;&#32;&#32;}
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00040"/>00040 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00041"/>00041 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00042"/>00042 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_printf(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*format,&#32;...)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00043"/>00043 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00044"/>00044 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;vprintf(format,&#32;args);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00046"/>00046 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00047"/>00047 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;50&#32;-&#32;(size_t)n;&#32;i++)
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00051"/>00051 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00052"/>00052 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00053"/>00053 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setup(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;(void)device;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00055"/>00055 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00056"/>00056 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00057"/>00057 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;cleanup(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1abba40bbe04d3a88d270634a788249477">size</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;device-&gt;<link linkend="_structblockdevice_1aca297cb4c31042de2aeda00a9b8f8196">erase</link>(device,&#32;0,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00060"/>00060 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00061"/>00061 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00062"/>00062 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_sd_card_connected(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1a49aee7ebd3ba09abcc167ba8b026e2a3">deinit</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00065"/>00065 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ad37adc41062aa442c1f80852285e0b35">init</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>)
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;==&#32;-5005)
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00074"/>00074 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00075"/>00075 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00076"/>00076 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_init(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;init&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00078"/>00078 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;init&#32;is&#32;done&#32;when&#32;the&#32;object&#32;is&#32;created.</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1a49aee7ebd3ba09abcc167ba8b026e2a3">deinit</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00081"/>00081 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00082"/>00082 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Init&#32;for&#32;later&#32;testing</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ad37adc41062aa442c1f80852285e0b35">init</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00086"/>00086 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00088"/>00088 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00089"/>00089 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00090"/>00090 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_sync(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;sync&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00092"/>00092 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1aaff48a348ee1441de6d05ffad85875ee">sync</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00095"/>00095 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00097"/>00097 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00098"/>00098 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00099"/>00099 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_erase_program_read(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;erase,program,read&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00101"/>00101 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;addr&#32;=&#32;0;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ab4bddfc59b1c4918514f359c4b509dd3">erase_size</link>;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00104"/>00104 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;erase&#32;test&#32;block</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1aca297cb4c31042de2aeda00a9b8f8196">erase</link>(device,&#32;addr,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00108"/>00108 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;program&#32;by&#32;random&#32;data</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;uint8_t&#32;*program_buffer&#32;=&#32;calloc(1,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;srand(length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;program_buffer[i]&#32;=&#32;rand()&#32;&amp;&#32;0xFF;
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1a07d24eb0a566f88aa45cf1d236006822">program</link>(device,&#32;program_buffer,&#32;addr,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00116"/>00116 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;read&#32;test&#32;block</emphasis>
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;uint8_t&#32;*read_buffer&#32;=&#32;calloc(1,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ae4801dd67b1481ac013520098523988e">read</link>(device,&#32;read_buffer,&#32;addr,&#32;length);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;assert(memcmp(program_buffer,&#32;read_buffer,&#32;length)&#32;==&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00122"/>00122 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;free(read_buffer);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;free(program_buffer);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00125"/>00125 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00127"/>00127 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00128"/>00128 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00129"/>00129 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_trim(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;trim&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00131"/>00131 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1a0326c4dca54ff9e7966053c3aa96adcf">trim</link>(device,&#32;0,&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00134"/>00134 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00136"/>00136 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00137"/>00137 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00138"/>00138 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_size(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;size&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00140"/>00140 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1abba40bbe04d3a88d270634a788249477">size</link>(device);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;assert(length&#32;&gt;&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00143"/>00143 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00145"/>00145 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00146"/>00146 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00147"/>00147 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_attribute(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00148"/>00148 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;attribute&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00149"/>00149 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;assert(device-&gt;<link linkend="_structblockdevice_1a44ac5dc03dd62d3c48abbdbd0c9fed4d">read_size</link>&#32;&gt;&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;assert(device-&gt;<link linkend="_structblockdevice_1ab4bddfc59b1c4918514f359c4b509dd3">erase_size</link>&#32;&gt;&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00152"/>00152 &#32;&#32;&#32;&#32;assert(device-&gt;<link linkend="_structblockdevice_1a79e2a5807006883bcbf1f60a91bdaf98">program_size</link>&#32;&gt;&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;assert(strlen(device-&gt;<link linkend="_structblockdevice_1ac5845731ff9674fc82a752fbd270130d">name</link>)&#32;&gt;&#32;0);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00154"/>00154 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;assert(device-&gt;<link linkend="_structblockdevice_1a73a27f59d5175f4a31d4ab3cd2a7e3c0">config</link>&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00156"/>00156 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;printf(<link linkend="_host_2test__blockdevice_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00158"/>00158 }
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00159"/>00159 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00160"/><link linkend="_integration_2test__blockdevice_8c_1aaa6a7a1b08b6bd092fbeeebf2476e6a6">00160</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_host_2test__blockdevice_8c_1aaa6a7a1b08b6bd092fbeeebf2476e6a6">test_blockdevice</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00161"/>00161 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Block&#32;device&#32;Onboard-Flash:\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*flash&#32;=&#32;<link linkend="_group__blockdevice__flash_1gaa4f26759924c70f9a86436aa58f67cfc">blockdevice_flash_create</link>(<link linkend="_integration_2test__blockdevice_8c_1ae38550b2008b82c08588d2340f196914">FLASH_START_AT</link>,&#32;<link linkend="_fs__init__loopback_8c_1a1f06fce82ce957c8dd28c5e07da29d97">FLASH_LENGTH_ALL</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00163"/>00163 &#32;&#32;&#32;&#32;assert(flash&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;setup(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00165"/>00165 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;test_api_init(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;test_api_erase_program_read(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;test_api_trim(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;test_api_sync(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;test_api_size(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;test_api_attribute(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00172"/>00172 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;cleanup(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__flash_1ga8d9d318677d2c372535f4c775c5a22c9">blockdevice_flash_free</link>(flash);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00175"/>00175 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00176"/>00176 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Block&#32;device&#32;SPI&#32;SD&#32;card:\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00177"/>00177 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*sd&#32;=&#32;<link linkend="_group__blockdevice__sd_1ga4711fc3f61142ce9387c984809bd3db8">blockdevice_sd_create</link>(spi0,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_regi__rev1_8h_1acd12af431f3d8c3752815d58f998c0ac">PICO_DEFAULT_SPI_TX_PIN</link>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_regi__rev1_8h_1ab7eaa7dddacd975821969189da644cdb">PICO_DEFAULT_SPI_RX_PIN</link>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_regi__rev1_8h_1adad46d9962adcf584b003bb52ef8e33e">PICO_DEFAULT_SPI_SCK_PIN</link>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_regi__rev1_8h_1a1f76bedc8bb59acb457e1943dda8431d">PICO_DEFAULT_SPI_CSN_PIN</link>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10&#32;*&#32;MHZ,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;assert(sd&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is_sd_card_connected(sd))&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setup(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00187"/>00187 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_init(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_erase_program_read(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_trim(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_sync(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_size(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_api_attribute(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00194"/>00194 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cleanup(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00196"/>00196 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;init&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;skip,&#32;device&#32;not&#32;connected\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00199"/>00199 &#32;&#32;&#32;&#32;}
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__sd_1gada9c8624c3e06c29f3780fa5f77fb6d9">blockdevice_sd_free</link>(sd);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00201"/>00201 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Block&#32;device&#32;Heap&#32;memory:\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*heap&#32;=&#32;<link linkend="_group__blockdevice__heap_1ga9500b5327f9bf0e2bf3ca11ec122748f">blockdevice_heap_create</link>(<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;assert(heap&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;setup(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00206"/>00206 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;test_api_init(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;test_api_erase_program_read(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;test_api_trim(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00210"/>00210 &#32;&#32;&#32;&#32;test_api_sync(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00211"/>00211 &#32;&#32;&#32;&#32;test_api_size(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00212"/>00212 &#32;&#32;&#32;&#32;test_api_attribute(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00213"/>00213 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;cleanup(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__heap_1ga6d78ccbc7b18231fadf2dd61c42f2a84">blockdevice_heap_free</link>(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00216"/>00216 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00217"/>00217 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Block&#32;device&#32;Loopback:\n&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;heap&#32;=&#32;<link linkend="_group__blockdevice__heap_1ga9500b5327f9bf0e2bf3ca11ec122748f">blockdevice_heap_create</link>(<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;assert(heap&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;setup(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fat&#32;=&#32;<link linkend="_group__filesystem__fat_1ga5b7bf00bfce64f76dd5cba01901781c5">filesystem_fat_create</link>();
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00222"/>00222 &#32;&#32;&#32;&#32;assert(fat&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00223"/>00223 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gac9f86bdbfdf77fb98f51551c4b6068ed">fs_format</link>(fat,&#32;heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1ga85336fdeb00149559c5c2008256c3013">fs_mount</link>(<emphasis role="stringliteral">&quot;/&quot;</emphasis>,&#32;fat,&#32;heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*loopback&#32;=&#32;<link linkend="_group__blockdevice__loopback_1gaf43766de5178a14bc204b9ec3b2a474d">blockdevice_loopback_create</link>(<emphasis role="stringliteral">&quot;/loopback&quot;</emphasis>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_host_2test__blockdevice_8c_1ab0b32c3001dc854345376d139b2fc9d4">LOOPBACK_STORAGE_SIZE</link>,
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_fs__init__loopback_8c_1ab8c390e6f53017179ae00255cd27fd11">LOOPBACK_BLOCK_SIZE</link>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00228"/>00228 &#32;&#32;&#32;&#32;assert(loopback&#32;!=&#32;NULL);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00229"/>00229 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00230"/>00230 &#32;&#32;&#32;&#32;test_api_init(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00231"/>00231 &#32;&#32;&#32;&#32;test_api_erase_program_read(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;test_api_trim(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00233"/>00233 &#32;&#32;&#32;&#32;test_api_sync(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;test_api_size(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;test_api_attribute(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00236"/>00236 
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;cleanup(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__loopback_1ga3c4a5393adc24e81505704fba94c1a15">blockdevice_loopback_free</link>(loopback);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1ga16e3ebc7a28d4b1ba08759b03ec739ff">fs_unmount</link>(<emphasis role="stringliteral">&quot;/&quot;</emphasis>);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem__fat_1gac9daf020a57d62f1b2fe7eef5ce5847e">filesystem_fat_free</link>(fat);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;cleanup(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__heap_1ga6d78ccbc7b18231fadf2dd61c42f2a84">blockdevice_heap_free</link>(heap);
<anchor xml:id="_integration_2test__blockdevice_8c_source_1l00243"/>00243 }
</programlisting></section>
