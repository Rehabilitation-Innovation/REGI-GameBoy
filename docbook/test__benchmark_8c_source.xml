<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_test__benchmark_8c_source" xml:lang="en-US">
<title>test_benchmark.c</title>
<indexterm><primary>lib/pico-vfs-REGI-Local/tests/host/test_benchmark.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_test__benchmark_8c_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;assert.h&gt;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_heap_8h">blockdevice/heap.h</link>&quot;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_fat_8h">filesystem/fat.h</link>&quot;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_littlefs_8h">filesystem/littlefs.h</link>&quot;</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00008"/>00008 
<anchor xml:id="_test__benchmark_8c_source_1l00009"/><link linkend="_test__benchmark_8c_1a589fea3c63209fa4d21b6b30d8c365c3">00009</link> <emphasis role="preprocessor">#define&#32;COLOR_GREEN(format)&#32;&#32;&#32;&#32;&#32;&#32;(&quot;\e[32m&quot;&#32;format&#32;&quot;\e[0m&quot;)</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00010"/><link linkend="_test__benchmark_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">00010</link> <emphasis role="preprocessor">#define&#32;HEAP_STORAGE_SIZE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(128&#32;*&#32;1024)</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00011"/><link linkend="_test__benchmark_8c_1a1c1a6c6d5b2ddab1836e6c57ace6e71d">00011</link> <emphasis role="preprocessor">#define&#32;LITTLEFS_BLOCK_CYCLE&#32;&#32;&#32;&#32;&#32;500</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00012"/><link linkend="_test__benchmark_8c_1a73694eeb2680f0f6e6fa72fcd0ad458d">00012</link> <emphasis role="preprocessor">#define&#32;LITTLEFS_LOOKAHEAD_SIZE&#32;&#32;16</emphasis>
<anchor xml:id="_test__benchmark_8c_source_1l00013"/>00013 
<anchor xml:id="_test__benchmark_8c_source_1l00014"/>00014 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_printf(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*format,&#32;...)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00015"/>00015 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_test__benchmark_8c_source_1l00016"/>00016 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_test__benchmark_8c_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;vprintf(format,&#32;args);
<anchor xml:id="_test__benchmark_8c_source_1l00018"/>00018 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_test__benchmark_8c_source_1l00019"/>00019 
<anchor xml:id="_test__benchmark_8c_source_1l00020"/>00020 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;50&#32;-&#32;(size_t)n;&#32;i++)
<anchor xml:id="_test__benchmark_8c_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;.&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00023"/>00023 }
<anchor xml:id="_test__benchmark_8c_source_1l00024"/>00024 
<anchor xml:id="_test__benchmark_8c_source_1l00025"/>00025 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;setup(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00026"/>00026 &#32;&#32;&#32;&#32;(void)device;
<anchor xml:id="_test__benchmark_8c_source_1l00027"/>00027 }
<anchor xml:id="_test__benchmark_8c_source_1l00028"/>00028 
<anchor xml:id="_test__benchmark_8c_source_1l00029"/>00029 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;cleanup(<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00030"/>00030 &#32;&#32;&#32;&#32;device-&gt;<link linkend="_structblockdevice_1ad37adc41062aa442c1f80852285e0b35">init</link>(device);
<anchor xml:id="_test__benchmark_8c_source_1l00031"/>00031 }
<anchor xml:id="_test__benchmark_8c_source_1l00032"/>00032 
<anchor xml:id="_test__benchmark_8c_source_1l00033"/>00033 <emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;xor_rand(uint32_t&#32;*seed)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00034"/>00034 &#32;&#32;&#32;&#32;*seed&#32;^=&#32;*seed&#32;&lt;&lt;&#32;13;
<anchor xml:id="_test__benchmark_8c_source_1l00035"/>00035 &#32;&#32;&#32;&#32;*seed&#32;^=&#32;*seed&#32;&gt;&gt;&#32;17;
<anchor xml:id="_test__benchmark_8c_source_1l00036"/>00036 &#32;&#32;&#32;&#32;*seed&#32;^=&#32;*seed&#32;&lt;&lt;&#32;5;
<anchor xml:id="_test__benchmark_8c_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*seed;
<anchor xml:id="_test__benchmark_8c_source_1l00038"/>00038 }
<anchor xml:id="_test__benchmark_8c_source_1l00039"/>00039 
<anchor xml:id="_test__benchmark_8c_source_1l00040"/>00040 <emphasis role="keyword">static</emphasis>&#32;uint32_t&#32;xor_rand_32bit(uint32_t&#32;*seed)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;xor_rand(seed);
<anchor xml:id="_test__benchmark_8c_source_1l00042"/>00042 }
<anchor xml:id="_test__benchmark_8c_source_1l00043"/>00043 
<anchor xml:id="_test__benchmark_8c_source_1l00044"/>00044 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_write(<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00045"/>00045 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;file_write&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00046"/>00046 
<anchor xml:id="_test__benchmark_8c_source_1l00047"/>00047 &#32;&#32;&#32;&#32;uint8_t&#32;buffer[512];
<anchor xml:id="_test__benchmark_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;10000;&#32;i++)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;file;
<anchor xml:id="_test__benchmark_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a28f1a1f90cf5c05660e20b20e55cf1c7">file_open</link>(fs,&#32;&amp;file,&#32;<emphasis role="stringliteral">&quot;/file&quot;</emphasis>,&#32;O_WRONLY|O_CREAT);
<anchor xml:id="_test__benchmark_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00052"/>00052 
<anchor xml:id="_test__benchmark_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;counter&#32;=&#32;0;
<anchor xml:id="_test__benchmark_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xor_rand(&amp;counter);
<anchor xml:id="_test__benchmark_8c_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;remind&#32;=&#32;<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>&#32;*&#32;0.4;
<anchor xml:id="_test__benchmark_8c_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(remind&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chunk&#32;=&#32;remind&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(buffer)&#32;?&#32;remind&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(buffer)&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(buffer);
<anchor xml:id="_test__benchmark_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;*b&#32;=&#32;(uint32_t&#32;*)buffer;
<anchor xml:id="_test__benchmark_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;(chunk&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(uint32_t));&#32;j++)
<anchor xml:id="_test__benchmark_8c_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;b[j]&#32;=&#32;xor_rand_32bit(&amp;counter);
<anchor xml:id="_test__benchmark_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ssize_t&#32;write_length&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1aa101ba0e335b6b94b615cd27edbef29f">file_write</link>(fs,&#32;&amp;file,&#32;buffer,&#32;chunk);
<anchor xml:id="_test__benchmark_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert((<emphasis role="keywordtype">size_t</emphasis>)write_length&#32;==&#32;chunk);
<anchor xml:id="_test__benchmark_8c_source_1l00063"/>00063 
<anchor xml:id="_test__benchmark_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remind&#32;=&#32;remind&#32;-&#32;chunk;
<anchor xml:id="_test__benchmark_8c_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_test__benchmark_8c_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab649defbea72289a00b64b6eabdd1b4d">file_close</link>(fs,&#32;&amp;file);
<anchor xml:id="_test__benchmark_8c_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__benchmark_8c_source_1l00069"/>00069 
<anchor xml:id="_test__benchmark_8c_source_1l00070"/>00070 &#32;&#32;&#32;&#32;printf(<link linkend="_test__benchmark_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_test__benchmark_8c_source_1l00071"/>00071 }
<anchor xml:id="_test__benchmark_8c_source_1l00072"/>00072 
<anchor xml:id="_test__benchmark_8c_source_1l00073"/>00073 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;test_api_read(<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;test_printf(<emphasis role="stringliteral">&quot;file_read&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00075"/>00075 
<anchor xml:id="_test__benchmark_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;uint8_t&#32;buffer[512];
<anchor xml:id="_test__benchmark_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;10000;&#32;i++)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;file;
<anchor xml:id="_test__benchmark_8c_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a28f1a1f90cf5c05660e20b20e55cf1c7">file_open</link>(fs,&#32;&amp;file,&#32;<emphasis role="stringliteral">&quot;/file&quot;</emphasis>,&#32;O_RDONLY);
<anchor xml:id="_test__benchmark_8c_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00081"/>00081 
<anchor xml:id="_test__benchmark_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;counter&#32;=&#32;0;
<anchor xml:id="_test__benchmark_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;xor_rand(&amp;counter);
<anchor xml:id="_test__benchmark_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;remind&#32;=&#32;<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>&#32;*&#32;0.4;
<anchor xml:id="_test__benchmark_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(remind&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chunk&#32;=&#32;remind&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(buffer)&#32;?&#32;remind&#32;%&#32;<emphasis role="keyword">sizeof</emphasis>(buffer)&#32;:&#32;<emphasis role="keyword">sizeof</emphasis>(buffer);
<anchor xml:id="_test__benchmark_8c_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ssize_t&#32;read_length&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1afa641bc200d34300f3306a7f2b1c0794">file_read</link>(fs,&#32;&amp;file,&#32;buffer,&#32;chunk);
<anchor xml:id="_test__benchmark_8c_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert((<emphasis role="keywordtype">size_t</emphasis>)read_length&#32;==&#32;chunk);
<anchor xml:id="_test__benchmark_8c_source_1l00089"/>00089 
<anchor xml:id="_test__benchmark_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;*b&#32;=&#32;(uint32_t&#32;*)buffer;
<anchor xml:id="_test__benchmark_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;chunk&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(uint32_t);&#32;j++)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">volatile</emphasis>&#32;uint32_t&#32;v&#32;=&#32;xor_rand_32bit(&amp;counter);
<anchor xml:id="_test__benchmark_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(b[j]&#32;==&#32;v);
<anchor xml:id="_test__benchmark_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_test__benchmark_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remind&#32;=&#32;remind&#32;-&#32;read_length;
<anchor xml:id="_test__benchmark_8c_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_test__benchmark_8c_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab649defbea72289a00b64b6eabdd1b4d">file_close</link>(fs,&#32;&amp;file);
<anchor xml:id="_test__benchmark_8c_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;}
<anchor xml:id="_test__benchmark_8c_source_1l00100"/>00100 
<anchor xml:id="_test__benchmark_8c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;printf(<link linkend="_test__benchmark_8c_1a589fea3c63209fa4d21b6b30d8c365c3">COLOR_GREEN</link>(<emphasis role="stringliteral">&quot;ok\n&quot;</emphasis>));
<anchor xml:id="_test__benchmark_8c_source_1l00102"/>00102 }
<anchor xml:id="_test__benchmark_8c_source_1l00103"/>00103 
<anchor xml:id="_test__benchmark_8c_source_1l00104"/><link linkend="_pico-vfs-_r_e_g_i-_local_2tests_2host_2main_8c_1aeeec5b59d14f83093172c3c1bb781c36">00104</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_test__benchmark_8c_1aeeec5b59d14f83093172c3c1bb781c36">test_benchmark</link>(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_test__benchmark_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;FAT&#32;write/read:\n&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00106"/>00106 
<anchor xml:id="_test__benchmark_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*heap&#32;=&#32;<link linkend="_group__blockdevice__heap_1ga9500b5327f9bf0e2bf3ca11ec122748f">blockdevice_heap_create</link>(<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>);
<anchor xml:id="_test__benchmark_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;assert(heap&#32;!=&#32;NULL);
<anchor xml:id="_test__benchmark_8c_source_1l00109"/>00109 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fat&#32;=&#32;<link linkend="_group__filesystem__fat_1ga5b7bf00bfce64f76dd5cba01901781c5">filesystem_fat_create</link>();
<anchor xml:id="_test__benchmark_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;assert(fat&#32;!=&#32;NULL);
<anchor xml:id="_test__benchmark_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;setup(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fat-&gt;format(fat,&#32;heap);
<anchor xml:id="_test__benchmark_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;err&#32;=&#32;fat-&gt;mount(fat,&#32;heap,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00116"/>00116 
<anchor xml:id="_test__benchmark_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;test_api_write(fat);
<anchor xml:id="_test__benchmark_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;test_api_read(fat);
<anchor xml:id="_test__benchmark_8c_source_1l00119"/>00119 
<anchor xml:id="_test__benchmark_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;err&#32;=&#32;fat-&gt;unmount(fat);
<anchor xml:id="_test__benchmark_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;cleanup(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem__fat_1gac9daf020a57d62f1b2fe7eef5ce5847e">filesystem_fat_free</link>(fat);
<anchor xml:id="_test__benchmark_8c_source_1l00124"/>00124 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__heap_1ga6d78ccbc7b18231fadf2dd61c42f2a84">blockdevice_heap_free</link>(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00125"/>00125 
<anchor xml:id="_test__benchmark_8c_source_1l00126"/>00126 
<anchor xml:id="_test__benchmark_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;littlefs&#32;write/read:\n&quot;</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00128"/>00128 &#32;&#32;&#32;&#32;heap&#32;=&#32;<link linkend="_group__blockdevice__heap_1ga9500b5327f9bf0e2bf3ca11ec122748f">blockdevice_heap_create</link>(<link linkend="_fs__init__heap_8c_1ac1d21a4fb714b1ecddeb24d45a2f6dae">HEAP_STORAGE_SIZE</link>);
<anchor xml:id="_test__benchmark_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;assert(heap&#32;!=&#32;NULL);
<anchor xml:id="_test__benchmark_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*lfs&#32;=&#32;<link linkend="_group__filesystem__littlefs_1ga6bf5205dec6fdf2ec2d190c44f5f2594">filesystem_littlefs_create</link>(<link linkend="_test__benchmark_8c_1a1c1a6c6d5b2ddab1836e6c57ace6e71d">LITTLEFS_BLOCK_CYCLE</link>,
<anchor xml:id="_test__benchmark_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_test__benchmark_8c_1a73694eeb2680f0f6e6fa72fcd0ad458d">LITTLEFS_LOOKAHEAD_SIZE</link>);
<anchor xml:id="_test__benchmark_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;assert(lfs&#32;!=&#32;NULL);
<anchor xml:id="_test__benchmark_8c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;setup(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;err&#32;=&#32;lfs-&gt;<link linkend="_structfilesystem_1ad7739bd29a4ee1d7e839c3bfe58d3c53">format</link>(lfs,&#32;heap);
<anchor xml:id="_test__benchmark_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;err&#32;=&#32;lfs-&gt;<link linkend="_structfilesystem_1ab137318416813c5413e1fb5f356e712c">mount</link>(lfs,&#32;heap,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_test__benchmark_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00138"/>00138 
<anchor xml:id="_test__benchmark_8c_source_1l00139"/>00139 
<anchor xml:id="_test__benchmark_8c_source_1l00140"/>00140 &#32;&#32;&#32;&#32;test_api_write(lfs);
<anchor xml:id="_test__benchmark_8c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;test_api_read(lfs);
<anchor xml:id="_test__benchmark_8c_source_1l00142"/>00142 
<anchor xml:id="_test__benchmark_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;err&#32;=&#32;lfs-&gt;<link linkend="_structfilesystem_1a6e052dafa112dba9a6d729a49cae08c1">unmount</link>(lfs);
<anchor xml:id="_test__benchmark_8c_source_1l00144"/>00144 &#32;&#32;&#32;&#32;assert(err&#32;==&#32;0);
<anchor xml:id="_test__benchmark_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;cleanup(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem__littlefs_1ga4cdb39bf1728e9ee86032ef5c4abd704">filesystem_littlefs_free</link>(lfs);
<anchor xml:id="_test__benchmark_8c_source_1l00147"/>00147 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice__heap_1ga6d78ccbc7b18231fadf2dd61c42f2a84">blockdevice_heap_free</link>(heap);
<anchor xml:id="_test__benchmark_8c_source_1l00148"/>00148 }
</programlisting></section>
