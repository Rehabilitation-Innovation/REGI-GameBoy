<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_game_scene" xml:lang="en-US">
<title>GameScene Class Reference</title>
<indexterm><primary>GameScene</primary></indexterm>
<para>

<para>Contains all of the common fucctions and members needed to render a scene. A down stream <link linkend="_class_game">Game</link> scene will use the frame buffer and engine refrences stored here to render. </para>
 
</para>
<para>
<computeroutput>#include &lt;GameScene.h&gt;</computeroutput>
</para>
Inheritance diagram for GameScene:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_game_scene__inherit__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for GameScene:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_game_scene__coll__graph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_game_scene_1a9f20a87546afdf718a1ef0ff4fb53200">GameScene</link> (<link linkend="_class_tiny_engine_frame_buffer">TinyEngineFrameBuffer</link> &amp;_framebuffer, <link linkend="_class_tiny_engine_renderer_i">TinyEngineRendererI</link> &amp;_renderer, <link linkend="_class_tiny_engine">TinyEngine</link> &amp;_engine)</para>

<para>Construct a new <link linkend="_class_game">Game</link> Scene object. </para>
</listitem>
            <listitem><para><link linkend="_class_game_scene_1add5bc48c372aaa7f526c02558a8adf00">~GameScene</link> ()</para>

<para>Destroy the <link linkend="_class_game">Game</link> Scene object. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_scene_1ac4f0485291c1719b76b4ed425661143c">create</link> () override</para>

<para>Create the scene after the object is created. This is for having multiple refrences to the same scene. Memory and configuration should only happen in this function. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_scene_1af107c5ffdf361b4e0b718f486cbc7d0e">render</link> () override</para>

<para>All framebuffer operations are done here and this is called only once per frame. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_scene_1a9bb2bd694b9c8399ea22aed23a6a809f">update</link> (double frameTime) override</para>

<para><link linkend="_class_game">Game</link> updates and other time dependednt modifications should be done here, there is no gurentee this is run only. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_scene_1a79aa067bf23e490cdfcb4aec1b181b12">destroy</link> () override</para>
</listitem>
        </itemizedlist>
</simplesect>
Public Member Functions inherited from <link linkend="_class_scene_i">SceneI</link>        <itemizedlist>
            <listitem><para>virtual <link linkend="_class_scene_i_1a9aca690ad096045ae588810c5dbcbd62">~SceneI</link> ()=default</para>
</listitem>
        </itemizedlist>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_tiny_engine_frame_buffer">TinyEngineFrameBuffer</link> &amp; <link linkend="_class_game_scene_1a6ce64a6f7dc23c88abe2d43d594ee269">m_framebuffer</link></para>
</listitem>
            <listitem><para><link linkend="_class_tiny_engine_renderer_i">TinyEngineRendererI</link> &amp; <link linkend="_class_game_scene_1abbc67a7bac90f11d7ee08c28dc3f0810">m_renderer</link></para>
</listitem>
            <listitem><para><link linkend="_class_tiny_engine">TinyEngine</link> &amp; <link linkend="_class_game_scene_1a3ddd4ba5bfabc73eebf7bba28c5ff534">m_engine</link></para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_sprite">Sprite</link> * &gt; <link linkend="_class_game_scene_1a894a08b41ccad98c26c0eb588a307d3b">sprites</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Contains all of the common fucctions and members needed to render a scene. A down stream <link linkend="_class_game">Game</link> scene will use the frame buffer and engine refrences stored here to render. </para>
<para>
Definition at line <link linkend="__game_scene_8h_source_1l00023">23</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_game_scene_1a9f20a87546afdf718a1ef0ff4fb53200"/><section>
    <title>GameScene()</title>
<indexterm><primary>GameScene</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>GameScene</secondary></indexterm>
<para><computeroutput>GameScene::GameScene (<link linkend="_class_tiny_engine_frame_buffer">TinyEngineFrameBuffer</link> &amp; _framebuffer, <link linkend="_class_tiny_engine_renderer_i">TinyEngineRendererI</link> &amp; _renderer, <link linkend="_class_tiny_engine">TinyEngine</link> &amp; _engine)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Construct a new <link linkend="_class_game">Game</link> Scene object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>_framebuffer</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>_renderer</entry><entry>
<para></para>
</entry>
                            </row>
                            <row>
<entry>_engine</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="__game_scene_8h_source_1l00038">38</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
<programlisting linenumbering="unnumbered">00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;<link linkend="_class_game_scene_1a6ce64a6f7dc23c88abe2d43d594ee269">m_framebuffer</link>(_framebuffer),&#32;<link linkend="_class_game_scene_1abbc67a7bac90f11d7ee08c28dc3f0810">m_renderer</link>(_renderer),&#32;<link linkend="_class_game_scene_1a3ddd4ba5bfabc73eebf7bba28c5ff534">m_engine</link>(_engine)&#32;{
00040 &#32;&#32;&#32;&#32;};
</programlisting></section>
<anchor xml:id="_class_game_scene_1add5bc48c372aaa7f526c02558a8adf00"/><section>
    <title>~GameScene()</title>
<indexterm><primary>~GameScene</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>~GameScene</secondary></indexterm>
<para><computeroutput>GameScene::~GameScene ( )</computeroutput></para><para>

<para>Destroy the <link linkend="_class_game">Game</link> Scene object. </para>
</para>
<para>
Definition at line <link linkend="__game_scene_8cpp_source_1l00006">6</link> of file <link linkend="__game_scene_8cpp_source">GameScene.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00007 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_game_scene_1ac4f0485291c1719b76b4ed425661143c"/><section>
    <title>create()</title>
<indexterm><primary>create</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>create</secondary></indexterm>
<para><computeroutput>void GameScene::create ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Create the scene after the object is created. This is for having multiple refrences to the same scene. Memory and configuration should only happen in this function. </para>
</para>
<para>
Implements <link linkend="_class_scene_i_1a7f6b05370faed688686525fe2d3706a0">SceneI</link>.</para>
<para>
Reimplemented in <link linkend="_class_snake_game_1a98f4ebbe3303b1627cf738e4684b69b4">SnakeGame</link>.</para>
<para>
Definition at line <link linkend="__game_scene_8cpp_source_1l00003">3</link> of file <link linkend="__game_scene_8cpp_source">GameScene.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00004 }
</programlisting></section>
<anchor xml:id="_class_game_scene_1a79aa067bf23e490cdfcb4aec1b181b12"/><section>
    <title>destroy()</title>
<indexterm><primary>destroy</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>destroy</secondary></indexterm>
<para><computeroutput>void GameScene::destroy ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>
Implements <link linkend="_class_scene_i_1aad87a877cb92b4ea71b2f50dc06e132b">SceneI</link>.</para>
<para>
Reimplemented in <link linkend="_class_snake_game_1ad05db6c6aaa3fad9f248d1e94df2a597">SnakeGame</link>.</para>
<para>
Definition at line <link linkend="__game_scene_8cpp_source_1l00009">9</link> of file <link linkend="__game_scene_8cpp_source">GameScene.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00010 };
</programlisting></section>
<anchor xml:id="_class_game_scene_1af107c5ffdf361b4e0b718f486cbc7d0e"/><section>
    <title>render()</title>
<indexterm><primary>render</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>render</secondary></indexterm>
<para><computeroutput>void GameScene::render ( )<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>All framebuffer operations are done here and this is called only once per frame. </para>
</para>
<para>
Implements <link linkend="_class_scene_i_1a573a66b660ce2e704f035ea27ac9ccac">SceneI</link>.</para>
<para>
Reimplemented in <link linkend="_class_snake_game_1a09eac49a79e09f012c8c5ca6c4d4c7eb">SnakeGame</link>.</para>
<para>
Definition at line <link linkend="__game_scene_8cpp_source_1l00029">29</link> of file <link linkend="__game_scene_8cpp_source">GameScene.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;Heap:&#32;%d&#32;bytes&#32;|&#32;&#32;Free:&#32;%d&#32;\n&quot;,&#32;getTotalHeap(),&#32;getFreeHeap());</emphasis>
00032 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;40,&#32;15);</emphasis>
00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
00034 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;Render&#32;Time&#32;%dms&#32;/&#32;%dms\n&quot;,&#32;m_engine.get_profile_render_loop_time(),</emphasis>
00035 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;m_engine.get_profile_main_loop_time());</emphasis>
00036 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;50,&#32;15);</emphasis>
00037 &#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
00038 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;Update:&#32;%dms&#32;/&#32;%dms\n&quot;,</emphasis>
00039 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;m_engine.get_profile_update_loop_time(),&#32;m_engine.get_profile_main_loop_time());</emphasis>
00040 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;60,&#32;15);</emphasis>
00041 
00042 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;allocated:&#32;%d&#32;bytes\n&quot;,&#32;info.uordblks);</emphasis>
00043 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;60,&#32;15);</emphasis>
00044 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;free:&#32;%d&#32;bytes\n&quot;,&#32;info.fordblks);</emphasis>
00045 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;70,&#32;15);</emphasis>
00046 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Total&#32;heap&#32;size:&#32;%d&#32;bytes\n&quot;,&#32;info.arena);</emphasis>
00047 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;80,&#32;15);</emphasis>
00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Largest&#32;free&#32;block:&#32;%d&#32;bytes\n&quot;,&#32;info.ordblks);</emphasis>
00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;90,&#32;15);</emphasis>
00050 &#32;&#32;&#32;&#32;sprintf(<emphasis role="keywordtype">string</emphasis>,&#32;<emphasis role="stringliteral">&quot;FPS:&#32;%d\r\n&quot;</emphasis>,&#32;<link linkend="_class_game_scene_1a3ddd4ba5bfabc73eebf7bba28c5ff534">m_engine</link>.get_fps());
00051 &#32;&#32;&#32;&#32;<link linkend="_class_game_scene_1a6ce64a6f7dc23c88abe2d43d594ee269">m_framebuffer</link>.draw_string(<emphasis role="keywordtype">string</emphasis>,&#32;5,&#32;10,&#32;15);
00052 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Press&#32;W,&#32;A,&#32;S,&#32;D&#32;for&#32;movement.\r\n&quot;);</emphasis>
00053 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;20,&#32;15);</emphasis>
00054 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sprintf(string,&#32;&quot;Press&#32;X&#32;to&#32;quit&#32;the&#32;game.\r\n&quot;);</emphasis>
00055 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;m_framebuffer.draw_string(string,&#32;5,&#32;30,&#32;15);</emphasis>
00056 
00057 };
</programlisting></section>
<anchor xml:id="_class_game_scene_1a9bb2bd694b9c8399ea22aed23a6a809f"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void GameScene::update (double frameTime)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para><link linkend="_class_game">Game</link> updates and other time dependednt modifications should be done here, there is no gurentee this is run only. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>frameTime</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_class_scene_i_1a917d7c8e713381b6ff20b1878a997100">SceneI</link>.</para>
<para>
Reimplemented in <link linkend="_class_snake_game_1a427ff7fbd06cf21fd64223a3c48d500d">SnakeGame</link>.</para>
<para>
Definition at line <link linkend="__game_scene_8cpp_source_1l00059">59</link> of file <link linkend="__game_scene_8cpp_source">GameScene.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00060 &#32;&#32;&#32;&#32;<link linkend="__game_scene_8cpp_1ab5b03fe4e6a8a45e275a46ef2b76a73e">info</link>&#32;=&#32;mallinfo();
00061 };
</programlisting></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_game_scene_1a3ddd4ba5bfabc73eebf7bba28c5ff534"/><section>
    <title>m_engine</title>
<indexterm><primary>m_engine</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>m_engine</secondary></indexterm>
<para><computeroutput><link linkend="_class_tiny_engine">TinyEngine</link>&amp; GameScene::m_engine<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__game_scene_8h_source_1l00027">27</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
</section>
<anchor xml:id="_class_game_scene_1a6ce64a6f7dc23c88abe2d43d594ee269"/><section>
    <title>m_framebuffer</title>
<indexterm><primary>m_framebuffer</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>m_framebuffer</secondary></indexterm>
<para><computeroutput><link linkend="_class_tiny_engine_frame_buffer">TinyEngineFrameBuffer</link>&amp; GameScene::m_framebuffer<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__game_scene_8h_source_1l00025">25</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
</section>
<anchor xml:id="_class_game_scene_1abbc67a7bac90f11d7ee08c28dc3f0810"/><section>
    <title>m_renderer</title>
<indexterm><primary>m_renderer</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>m_renderer</secondary></indexterm>
<para><computeroutput><link linkend="_class_tiny_engine_renderer_i">TinyEngineRendererI</link>&amp; GameScene::m_renderer<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__game_scene_8h_source_1l00026">26</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
</section>
<anchor xml:id="_class_game_scene_1a894a08b41ccad98c26c0eb588a307d3b"/><section>
    <title>sprites</title>
<indexterm><primary>sprites</primary><secondary>GameScene</secondary></indexterm>
<indexterm><primary>GameScene</primary><secondary>sprites</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_sprite">Sprite</link>*&gt; GameScene::sprites<computeroutput>[protected]</computeroutput></computeroutput></para><para>
Definition at line <link linkend="__game_scene_8h_source_1l00028">28</link> of file <link linkend="__game_scene_8h_source">GameScene.h</link>.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
inc/<link linkend="__game_scene_8h">GameScene.h</link>src/<link linkend="__game_scene_8cpp">GameScene.cpp</link></section>
</section>
