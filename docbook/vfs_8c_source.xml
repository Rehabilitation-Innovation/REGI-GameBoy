<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_vfs_8c_source" xml:lang="en-US">
<title>vfs.c</title>
<indexterm><primary>lib/pico-vfs-REGI-Local/src/filesystem/vfs.c</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_vfs_8c_source_1l00001"/>00001 <emphasis role="comment">/*</emphasis>
<anchor xml:id="_vfs_8c_source_1l00002"/>00002 <emphasis role="comment">&#32;*&#32;Copyright&#32;2024,&#32;Hiroyuki&#32;OYAMA</emphasis>
<anchor xml:id="_vfs_8c_source_1l00003"/>00003 <emphasis role="comment">&#32;*</emphasis>
<anchor xml:id="_vfs_8c_source_1l00004"/>00004 <emphasis role="comment">&#32;*&#32;SPDX-License-Identifier:&#32;BSD-3-Clause</emphasis>
<anchor xml:id="_vfs_8c_source_1l00005"/>00005 <emphasis role="comment">&#32;*/</emphasis>
<anchor xml:id="_vfs_8c_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;sys/errno.h&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;<link linkend="_dirent_8h">sys/dirent.h</link>&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;sys/unistd.h&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00011"/>00011 <emphasis role="preprocessor">#include&#32;&lt;pico/mutex.h&gt;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00012"/>00012 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_vfs_8h">filesystem/vfs.h</link>&quot;</emphasis>
<anchor xml:id="_vfs_8c_source_1l00013"/>00013 
<anchor xml:id="_vfs_8c_source_1l00014"/>00014 
<anchor xml:id="_vfs_8c_source_1l00015"/><link linkend="_structmountpoint__t">00015</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_vfs_8c_source_1l00016"/><link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>;
<anchor xml:id="_vfs_8c_source_1l00017"/><link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">00017</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00018"/><link linkend="_structmountpoint__t_1ab2a8127554cc303a3f1e04f0440a4a08">00018</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_structmountpoint__t_1ab2a8127554cc303a3f1e04f0440a4a08">device</link>;
<anchor xml:id="_vfs_8c_source_1l00019"/>00019 }&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>;
<anchor xml:id="_vfs_8c_source_1l00020"/>00020 
<anchor xml:id="_vfs_8c_source_1l00021"/><link linkend="_structfile__descriptor__t">00021</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_vfs_8c_source_1l00022"/><link linkend="_structfile__descriptor__t_1a460b0237a9ab39d21d2cee70d112517f">00022</link> &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*<link linkend="_structfile__descriptor__t_1a460b0237a9ab39d21d2cee70d112517f">file</link>;
<anchor xml:id="_vfs_8c_source_1l00023"/><link linkend="_structfile__descriptor__t_1a402fa703a0fcdd4f478035069f853b89">00023</link> &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*<link linkend="_structfile__descriptor__t_1a402fa703a0fcdd4f478035069f853b89">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00024"/><link linkend="_structfile__descriptor__t_1aab35f181a890bc25bdabd57fca6ee043">00024</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_structfile__descriptor__t_1aab35f181a890bc25bdabd57fca6ee043">path</link>[<link linkend="_filesystem_8h_1ae688d728e1acdfe5988c7db45d6f0166">PATH_MAX</link>&#32;+&#32;1];
<anchor xml:id="_vfs_8c_source_1l00025"/>00025 }&#32;<link linkend="_structfile__descriptor__t">file_descriptor_t</link>;
<anchor xml:id="_vfs_8c_source_1l00026"/>00026 
<anchor xml:id="_vfs_8c_source_1l00027"/><link linkend="_structdir__descriptor__t">00027</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>{
<anchor xml:id="_vfs_8c_source_1l00028"/><link linkend="_structdir__descriptor__t_1ad03bb3f26e7e55f01bed6e31dfe6e2c4">00028</link> &#32;&#32;&#32;&#32;<link linkend="_structfs__dir__t">fs_dir_t</link>&#32;*<link linkend="_structdir__descriptor__t_1ad03bb3f26e7e55f01bed6e31dfe6e2c4">dir</link>;
<anchor xml:id="_vfs_8c_source_1l00029"/><link linkend="_structdir__descriptor__t_1ac932335d01e6ef300dae0a9dd1214af6">00029</link> &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*<link linkend="_structdir__descriptor__t_1ac932335d01e6ef300dae0a9dd1214af6">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00030"/>00030 }&#32;<link linkend="_structdir__descriptor__t">dir_descriptor_t</link>;
<anchor xml:id="_vfs_8c_source_1l00031"/>00031 
<anchor xml:id="_vfs_8c_source_1l00032"/>00032 <emphasis role="preprocessor">#if&#32;!defined(PICO_VFS_MAX_MOUNTPOINT)</emphasis>
<anchor xml:id="_vfs_8c_source_1l00033"/><link linkend="_vfs_8c_1ad12537cb47987ba10b4fac6446cf49fa">00033</link> <emphasis role="preprocessor">#define&#32;PICO_VFS_MAX_MOUNTPOINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10</emphasis>
<anchor xml:id="_vfs_8c_source_1l00034"/>00034 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_vfs_8c_source_1l00035"/><link linkend="_vfs_8c_1a4a9d13c5a7d33570511593f81d8aa493">00035</link> <emphasis role="preprocessor">#define&#32;FS_MAX_MOUNTPOINT&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PICO_VFS_MAX_MOUNTPOINT</emphasis>
<anchor xml:id="_vfs_8c_source_1l00036"/><link linkend="_vfs_8c_1a0718d44242f5b7416ec3311212081e65">00036</link> <emphasis role="preprocessor">#define&#32;STDIO_FILNO_MAX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;STDERR_FILENO</emphasis>
<anchor xml:id="_vfs_8c_source_1l00037"/><link linkend="_vfs_8c_1aa07c3cee02f6b8388d5616d76f19dcbf">00037</link> <emphasis role="preprocessor">#define&#32;FILENO_VALUE(fd)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(fd&#32;+&#32;STDIO_FILNO_MAX&#32;+&#32;1)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Conversion&#32;to&#32;file&#32;descriptors&#32;for&#32;publication</emphasis>
<anchor xml:id="_vfs_8c_source_1l00038"/><link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">00038</link> <emphasis role="preprocessor">#define&#32;FILENO_INDEX(fd)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(fd&#32;-&#32;STDIO_FILNO_MAX&#32;-&#32;1)&#32;&#32;</emphasis><emphasis role="comment">//&#32;Conversion&#32;to&#32;file&#32;descriptors&#32;for&#32;internal&#32;use</emphasis>
<anchor xml:id="_vfs_8c_source_1l00039"/>00039 
<anchor xml:id="_vfs_8c_source_1l00040"/>00040 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;mountpoints[<link linkend="_vfs_8c_1a4a9d13c5a7d33570511593f81d8aa493">FS_MAX_MOUNTPOINT</link>]&#32;=&#32;{0};&#32;&#32;<emphasis role="comment">//&#32;Mount&#32;points&#32;and&#32;file&#32;system&#32;map</emphasis>
<anchor xml:id="_vfs_8c_source_1l00041"/>00041 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_file_descriptor&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;File&#32;descriptor&#32;current&#32;maximum&#32;value</emphasis>
<anchor xml:id="_vfs_8c_source_1l00042"/>00042 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structfile__descriptor__t">file_descriptor_t</link>&#32;*file_descriptor&#32;=&#32;NULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;File&#32;descriptor&#32;and&#32;file&#32;system&#32;map</emphasis>
<anchor xml:id="_vfs_8c_source_1l00043"/>00043 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;max_dir_descriptor&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dir&#32;descriptor&#32;current&#32;maximum&#32;value</emphasis>
<anchor xml:id="_vfs_8c_source_1l00044"/>00044 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structdir__descriptor__t">dir_descriptor_t</link>&#32;*dir_descriptor&#32;=&#32;NULL;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dir&#32;descriptor&#32;and&#32;file&#32;system&#32;map</emphasis>
<anchor xml:id="_vfs_8c_source_1l00045"/>00045 <emphasis role="keyword">static</emphasis>&#32;recursive_mutex_t&#32;<link linkend="_src_2filesystem_2fs__init_8c_1acdc7c707257b149d05bc7b779c55867c">__attribute__</link>((unused))&#32;_mutex;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recursive&#32;mutexes&#32;are&#32;used&#32;because&#32;recursive&#32;calls&#32;occur,&#32;e.g.&#32;on&#32;loopback&#32;devices</emphasis>
<anchor xml:id="_vfs_8c_source_1l00046"/>00046 
<anchor xml:id="_vfs_8c_source_1l00047"/>00047 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_error_remap(<emphasis role="keywordtype">int</emphasis>&#32;err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;&gt;=&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errno&#32;=&#32;0;
<anchor xml:id="_vfs_8c_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;err;
<anchor xml:id="_vfs_8c_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00052"/>00052 
<anchor xml:id="_vfs_8c_source_1l00053"/>00053 &#32;&#32;&#32;&#32;errno&#32;=&#32;-err;
<anchor xml:id="_vfs_8c_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00055"/>00055 }
<anchor xml:id="_vfs_8c_source_1l00056"/>00056 
<anchor xml:id="_vfs_8c_source_1l00057"/>00057 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*remove_prefix(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*prefix)&#32;{
<anchor xml:id="_vfs_8c_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len_prefix&#32;=&#32;strlen(prefix);
<anchor xml:id="_vfs_8c_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len_str&#32;=&#32;strlen(str);
<anchor xml:id="_vfs_8c_source_1l00060"/>00060 
<anchor xml:id="_vfs_8c_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len_str&#32;&lt;&#32;len_prefix&#32;||&#32;strncmp(str,&#32;prefix,&#32;len_prefix)&#32;!=&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str;
<anchor xml:id="_vfs_8c_source_1l00063"/>00063 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;str&#32;+&#32;len_prefix;
<anchor xml:id="_vfs_8c_source_1l00065"/>00065 }
<anchor xml:id="_vfs_8c_source_1l00066"/>00066 
<anchor xml:id="_vfs_8c_source_1l00067"/>00067 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*find_mountpoint(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*longest_match&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;longest_length&#32;=&#32;0;
<anchor xml:id="_vfs_8c_source_1l00070"/>00070 
<anchor xml:id="_vfs_8c_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_vfs_8c_1a4a9d13c5a7d33570511593f81d8aa493">FS_MAX_MOUNTPOINT</link>;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;prefix_length&#32;=&#32;strlen(mountpoints[i].dir);
<anchor xml:id="_vfs_8c_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(prefix_length&#32;&gt;&#32;longest_length&#32;&amp;&amp;&#32;strncmp(path,&#32;mountpoints[i].dir,&#32;prefix_length)&#32;==&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;longest_match&#32;=&#32;&amp;mountpoints[i];
<anchor xml:id="_vfs_8c_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;longest_length&#32;=&#32;prefix_length;
<anchor xml:id="_vfs_8c_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00077"/>00077 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;longest_match;
<anchor xml:id="_vfs_8c_source_1l00079"/>00079 }
<anchor xml:id="_vfs_8c_source_1l00080"/>00080 
<anchor xml:id="_vfs_8c_source_1l00081"/>00081 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;is_valid_file_descriptor(<emphasis role="keywordtype">int</emphasis>&#32;fildes)&#32;{
<anchor xml:id="_vfs_8c_source_1l00082"/>00082 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fildes&#32;&lt;=&#32;<link linkend="_vfs_8c_1a0718d44242f5b7416ec3311212081e65">STDIO_FILNO_MAX</link>&#32;||&#32;(<emphasis role="keywordtype">int</emphasis>)max_file_descriptor&#32;&lt;=&#32;<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes))
<anchor xml:id="_vfs_8c_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_vfs_8c_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00086"/>00086 }
<anchor xml:id="_vfs_8c_source_1l00087"/>00087 
<anchor xml:id="_vfs_8c_source_1l00088"/><link linkend="_group__filesystem_1gac9f86bdbfdf77fb98f51551c4b6068ed">00088</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__filesystem_1gac9f86bdbfdf77fb98f51551c4b6068ed">fs_format</link>(<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs,&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_vfs_8c_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!device-&gt;<link linkend="_structblockdevice_1a9a2c51cef39211e0d1c42fc3e395caa0">is_initialized</link>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ad37adc41062aa442c1f80852285e0b35">init</link>(device);
<anchor xml:id="_vfs_8c_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;<link linkend="_blockdevice_8h_1a6202ecf5974ef985db5f3a2adfd81abba75df174773e6ad20c734b0cee152387c">BD_ERROR_OK</link>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fs-&gt;<link linkend="_structfilesystem_1ad7739bd29a4ee1d7e839c3bfe58d3c53">format</link>(fs,&#32;device);
<anchor xml:id="_vfs_8c_source_1l00096"/>00096 }
<anchor xml:id="_vfs_8c_source_1l00097"/>00097 
<anchor xml:id="_vfs_8c_source_1l00098"/><link linkend="_group__filesystem_1ga85336fdeb00149559c5c2008256c3013">00098</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__filesystem_1ga85336fdeb00149559c5c2008256c3013">fs_mount</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*dir,&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs,&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device)&#32;{
<anchor xml:id="_vfs_8c_source_1l00099"/>00099 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!device-&gt;<link linkend="_structblockdevice_1a9a2c51cef39211e0d1c42fc3e395caa0">is_initialized</link>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;device-&gt;<link linkend="_structblockdevice_1ad37adc41062aa442c1f80852285e0b35">init</link>(device);
<anchor xml:id="_vfs_8c_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)
<anchor xml:id="_vfs_8c_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00103"/>00103 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00104"/>00104 
<anchor xml:id="_vfs_8c_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab137318416813c5413e1fb5f356e712c">mount</link>(fs,&#32;device,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00106"/>00106 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00108"/>00108 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00109"/>00109 
<anchor xml:id="_vfs_8c_source_1l00110"/>00110 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00111"/>00111 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00112"/>00112 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_vfs_8c_1a4a9d13c5a7d33570511593f81d8aa493">FS_MAX_MOUNTPOINT</link>;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mountpoints[i].<link linkend="_structfilesystem">filesystem</link>&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mountpoints[i].filesystem&#32;=&#32;fs;
<anchor xml:id="_vfs_8c_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mountpoints[i].device&#32;=&#32;device;
<anchor xml:id="_vfs_8c_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mountpoints[i].dir&#32;=&#32;strdup(dir);
<anchor xml:id="_vfs_8c_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00120"/>00120 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00121"/>00121 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00122"/>00122 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EFAULT);
<anchor xml:id="_vfs_8c_source_1l00123"/>00123 }
<anchor xml:id="_vfs_8c_source_1l00124"/>00124 
<anchor xml:id="_vfs_8c_source_1l00125"/><link linkend="_group__filesystem_1ga16e3ebc7a28d4b1ba08759b03ec739ff">00125</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__filesystem_1ga16e3ebc7a28d4b1ba08759b03ec739ff">fs_unmount</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00126"/>00126 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00127"/>00127 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00128"/>00128 
<anchor xml:id="_vfs_8c_source_1l00129"/>00129 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00130"/>00130 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00133"/>00133 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a6e052dafa112dba9a6d729a49cae08c1">unmount</link>(fs);
<anchor xml:id="_vfs_8c_source_1l00136"/>00136 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00139"/>00139 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00140"/>00140 
<anchor xml:id="_vfs_8c_source_1l00141"/>00141 &#32;&#32;&#32;&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00142"/>00142 &#32;&#32;&#32;&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab2a8127554cc303a3f1e04f0440a4a08">device</link>&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00143"/>00143 &#32;&#32;&#32;&#32;free((<emphasis role="keywordtype">char</emphasis>&#32;*)mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00144"/>00144 
<anchor xml:id="_vfs_8c_source_1l00145"/>00145 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00147"/>00147 }
<anchor xml:id="_vfs_8c_source_1l00148"/>00148 
<anchor xml:id="_vfs_8c_source_1l00149"/><link linkend="_group__filesystem_1ga72d0b65b57fe9e8c02c149a20c5fc0cd">00149</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__filesystem_1ga72d0b65b57fe9e8c02c149a20c5fc0cd">fs_reformat</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00150"/>00150 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00151"/>00151 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00152"/>00152 
<anchor xml:id="_vfs_8c_source_1l00153"/>00153 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00157"/>00157 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00159"/>00159 &#32;&#32;&#32;&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;*device&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab2a8127554cc303a3f1e04f0440a4a08">device</link>;
<anchor xml:id="_vfs_8c_source_1l00160"/>00160 
<anchor xml:id="_vfs_8c_source_1l00161"/>00161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a6e052dafa112dba9a6d729a49cae08c1">unmount</link>(fs);
<anchor xml:id="_vfs_8c_source_1l00162"/>00162 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00166"/>00166 &#32;&#32;&#32;&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ad7739bd29a4ee1d7e839c3bfe58d3c53">format</link>(fs,&#32;device);
<anchor xml:id="_vfs_8c_source_1l00167"/>00167 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00170"/>00170 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00171"/>00171 &#32;&#32;&#32;&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab137318416813c5413e1fb5f356e712c">mount</link>(fs,&#32;device,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00172"/>00172 
<anchor xml:id="_vfs_8c_source_1l00173"/>00173 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00174"/>00174 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00175"/>00175 }
<anchor xml:id="_vfs_8c_source_1l00176"/>00176 
<anchor xml:id="_vfs_8c_source_1l00177"/><link linkend="_group__filesystem_1ga9b690589883c3b7e8364ca1817ff6986">00177</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_group__filesystem_1ga9b690589883c3b7e8364ca1817ff6986">fs_info</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path,&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;**fs,&#32;<link linkend="_group__blockdevice_1ga4bc2c146f975b5250be7f8f5f219f5e4">blockdevice_t</link>&#32;**device)&#32;{
<anchor xml:id="_vfs_8c_source_1l00178"/>00178 &#32;&#32;&#32;&#32;(void)fs;
<anchor xml:id="_vfs_8c_source_1l00179"/>00179 &#32;&#32;&#32;&#32;(void)device;
<anchor xml:id="_vfs_8c_source_1l00180"/>00180 
<anchor xml:id="_vfs_8c_source_1l00181"/>00181 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00182"/>00182 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00183"/>00183 
<anchor xml:id="_vfs_8c_source_1l00184"/>00184 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00185"/>00185 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00188"/>00188 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00189"/>00189 &#32;&#32;&#32;&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00190"/>00190 &#32;&#32;&#32;&#32;*device&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab2a8127554cc303a3f1e04f0440a4a08">device</link>;
<anchor xml:id="_vfs_8c_source_1l00191"/>00191 
<anchor xml:id="_vfs_8c_source_1l00192"/>00192 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00193"/>00193 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00194"/>00194 }
<anchor xml:id="_vfs_8c_source_1l00195"/>00195 
<anchor xml:id="_vfs_8c_source_1l00196"/><link linkend="_vfs_8c_1a11bde836cab6ec72897ede2286350e72">00196</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a11bde836cab6ec72897ede2286350e72">_unlink</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00197"/>00197 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00198"/>00198 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00199"/>00199 
<anchor xml:id="_vfs_8c_source_1l00200"/>00200 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00204"/>00204 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00206"/>00206 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a168c6ebc947bcef4dd441c4846199663">remove</link>(fs,&#32;entity_path);
<anchor xml:id="_vfs_8c_source_1l00208"/>00208 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00209"/>00209 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00210"/>00210 }
<anchor xml:id="_vfs_8c_source_1l00211"/>00211 
<anchor xml:id="_vfs_8c_source_1l00212"/><link linkend="_vfs_8c_1a2ce7c2db9fdb6aec06afaf3cfc5979c7">00212</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a2ce7c2db9fdb6aec06afaf3cfc5979c7">rename</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*old,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<emphasis role="keyword">new</emphasis>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00213"/>00213 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;Check&#32;if&#32;old&#32;and&#32;new&#32;are&#32;the&#32;same&#32;filesystem</emphasis>
<anchor xml:id="_vfs_8c_source_1l00214"/>00214 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00215"/>00215 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(old);
<anchor xml:id="_vfs_8c_source_1l00217"/>00217 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00220"/>00220 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*old_entity_path&#32;=&#32;remove_prefix(old,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*new_entity_path&#32;=&#32;remove_prefix(<emphasis role="keyword">new</emphasis>,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00223"/>00223 
<anchor xml:id="_vfs_8c_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a1642d2b8278ee2e0e28e67e3c871e7af">rename</link>(fs,&#32;old_entity_path,&#32;new_entity_path);
<anchor xml:id="_vfs_8c_source_1l00226"/>00226 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00227"/>00227 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00228"/>00228 }
<anchor xml:id="_vfs_8c_source_1l00229"/>00229 
<anchor xml:id="_vfs_8c_source_1l00230"/><link linkend="_vfs_8c_1a548e5b744ca2e97beb61ad7aa41114e2">00230</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a548e5b744ca2e97beb61ad7aa41114e2">mkdir</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path,&#32;mode_t&#32;mode)&#32;{
<anchor xml:id="_vfs_8c_source_1l00231"/>00231 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00232"/>00232 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00236"/>00236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00237"/>00237 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a9f586df0f698f0472b033f406de87de3">mkdir</link>(fs,&#32;entity_path,&#32;mode);
<anchor xml:id="_vfs_8c_source_1l00241"/>00241 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00243"/>00243 }
<anchor xml:id="_vfs_8c_source_1l00244"/>00244 
<anchor xml:id="_vfs_8c_source_1l00245"/><link linkend="_vfs_8c_1ab2df76f2c62ae012c2e417813b5fe8ce">00245</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1ab2df76f2c62ae012c2e417813b5fe8ce">rmdir</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00246"/>00246 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00247"/>00247 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00252"/>00252 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00253"/>00253 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a396727009601ff7cd9505b724dc744f3">rmdir</link>(fs,&#32;entity_path);
<anchor xml:id="_vfs_8c_source_1l00256"/>00256 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00258"/>00258 }
<anchor xml:id="_vfs_8c_source_1l00259"/>00259 
<anchor xml:id="_vfs_8c_source_1l00260"/><link linkend="_vfs_8c_1a43bfed3654a97b85373f2d4198990c8d">00260</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a43bfed3654a97b85373f2d4198990c8d">_stat</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path,&#32;<emphasis role="keyword">struct</emphasis>&#32;stat&#32;*st)&#32;{
<anchor xml:id="_vfs_8c_source_1l00261"/>00261 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00262"/>00262 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00263"/>00263 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00267"/>00267 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00268"/>00268 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab5f68a612c88a96e638d2035a7ec59fd">stat</link>(fs,&#32;entity_path,&#32;st);
<anchor xml:id="_vfs_8c_source_1l00271"/>00271 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00272"/>00272 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00273"/>00273 }
<anchor xml:id="_vfs_8c_source_1l00274"/>00274 
<anchor xml:id="_vfs_8c_source_1l00275"/><link linkend="_vfs_8c_1a96ed08daea40a660b6059ae5ddd9d063">00275</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a96ed08daea40a660b6059ae5ddd9d063">_fstat</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes,&#32;<emphasis role="keyword">struct</emphasis>&#32;stat&#32;*st)&#32;{
<anchor xml:id="_vfs_8c_source_1l00276"/>00276 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00277"/>00277 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00278"/>00278 
<anchor xml:id="_vfs_8c_source_1l00279"/>00279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fildes&#32;==&#32;STDIN_FILENO&#32;||&#32;fildes&#32;==&#32;STDOUT_FILENO&#32;||&#32;fildes&#32;==&#32;STDERR_FILENO)&#32;{
<anchor xml:id="_vfs_8c_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;st_size&#32;=&#32;0;
<anchor xml:id="_vfs_8c_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;st-&gt;st_mode&#32;=&#32;S_IFCHR;
<anchor xml:id="_vfs_8c_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00284"/>00284 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00288"/>00288 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00289"/>00289 
<anchor xml:id="_vfs_8c_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00295"/>00295 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00296"/>00296 
<anchor xml:id="_vfs_8c_source_1l00297"/>00297 &#32;&#32;&#32;&#32;off_t&#32;size&#32;=&#32;0;
<anchor xml:id="_vfs_8c_source_1l00298"/>00298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs-&gt;<link linkend="_structfilesystem_1a4ba3d1ab6d89005e297c86eb8bafd225">type</link>&#32;!=&#32;<link linkend="_filesystem_8h_1ae11c5ff9c996a8d72f65fcf4d52f4804a0c11236c0a4aca6a7701b384bdc11d92">FILESYSTEM_TYPE_FAT</link>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_t&#32;current&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1acdf7fe4f2c1ef87fc1f2894cf473d271">file_tell</link>(fs,&#32;file);
<anchor xml:id="_vfs_8c_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a42ee5c83a7fe9edddb0181f9b54d7b00">file_seek</link>(fs,&#32;file,&#32;0,&#32;SEEK_END);
<anchor xml:id="_vfs_8c_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;off_t&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a42ee5c83a7fe9edddb0181f9b54d7b00">file_seek</link>(fs,&#32;file,&#32;current,&#32;SEEK_SET);
<anchor xml:id="_vfs_8c_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;!=&#32;err)&#32;{
<anchor xml:id="_vfs_8c_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00306"/>00306 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_vfs_8c_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;NOTE:&#32;Support&#32;for&#32;different&#32;behaviour&#32;of&#32;FatFs&#32;from&#32;POSIX</emphasis>
<anchor xml:id="_vfs_8c_source_1l00308"/>00308 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
<anchor xml:id="_vfs_8c_source_1l00309"/>00309 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;FatFs&#32;has&#32;a&#32;problem&#32;where&#32;f_size()&#32;reports&#32;a&#32;larger&#32;than&#32;actual&#32;file&#32;size&#32;when</emphasis>
<anchor xml:id="_vfs_8c_source_1l00310"/>00310 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;moved&#32;to&#32;a&#32;position&#32;beyond&#32;the&#32;f_lseek()&#32;file&#32;size;&#32;POSIX&#32;reports&#32;the&#32;actual&#32;size</emphasis>
<anchor xml:id="_vfs_8c_source_1l00311"/>00311 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;written&#32;to&#32;the&#32;file,&#32;not&#32;the&#32;seek&#32;position.</emphasis>
<anchor xml:id="_vfs_8c_source_1l00312"/>00312 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_vfs_8c_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].path;
<anchor xml:id="_vfs_8c_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00321"/>00321 
<anchor xml:id="_vfs_8c_source_1l00322"/>00322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>stat&#32;finfo&#32;=&#32;{0};
<anchor xml:id="_vfs_8c_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab5f68a612c88a96e638d2035a7ec59fd">stat</link>(fs,&#32;entity_path,&#32;&amp;finfo);
<anchor xml:id="_vfs_8c_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00328"/>00328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;finfo.st_size;
<anchor xml:id="_vfs_8c_source_1l00329"/>00329 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00330"/>00330 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00331"/>00331 
<anchor xml:id="_vfs_8c_source_1l00332"/>00332 &#32;&#32;&#32;&#32;st-&gt;st_size&#32;=&#32;size;
<anchor xml:id="_vfs_8c_source_1l00333"/>00333 &#32;&#32;&#32;&#32;st-&gt;st_mode&#32;=&#32;S_IFREG;
<anchor xml:id="_vfs_8c_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00335"/>00335 }
<anchor xml:id="_vfs_8c_source_1l00336"/>00336 
<anchor xml:id="_vfs_8c_source_1l00337"/>00337 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_assign_file_descriptor()&#32;{
<anchor xml:id="_vfs_8c_source_1l00338"/>00338 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00339"/>00339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(max_file_descriptor&#32;==&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_file_descriptor&#32;=&#32;2;
<anchor xml:id="_vfs_8c_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_descriptor&#32;=&#32;calloc(max_file_descriptor,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structfile__descriptor__t">file_descriptor_t</link>));
<anchor xml:id="_vfs_8c_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_descriptor&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;_open:&#32;Out&#32;of&#32;memory\n&quot;</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00344"/>00344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00346"/>00346 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00347"/>00347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;max_file_descriptor;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_descriptor[i].<link linkend="_structfilesystem">filesystem</link>&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fd&#32;=&#32;i;
<anchor xml:id="_vfs_8c_source_1l00350"/>00350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00351"/>00351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00352"/>00352 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00353"/>00353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fd&#32;==&#32;-1)&#32;{
<anchor xml:id="_vfs_8c_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extend&#32;the&#32;management&#32;array</emphasis>
<anchor xml:id="_vfs_8c_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;last_max&#32;=&#32;max_file_descriptor;
<anchor xml:id="_vfs_8c_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_file_descriptor&#32;*=&#32;2;
<anchor xml:id="_vfs_8c_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_descriptor&#32;=&#32;realloc(file_descriptor,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structfile__descriptor__t">file_descriptor_t</link>)&#32;*&#32;max_file_descriptor);
<anchor xml:id="_vfs_8c_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file_descriptor&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00359"/>00359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;_open:&#32;Out&#32;of&#32;memory\n&quot;</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00361"/>00361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;last_max;&#32;i&#32;&lt;&#32;max_file_descriptor;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_descriptor[i].filesystem&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_descriptor[i].file&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fd&#32;=&#32;last_max;
<anchor xml:id="_vfs_8c_source_1l00367"/>00367 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00368"/>00368 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_vfs_8c_1aa07c3cee02f6b8388d5616d76f19dcbf">FILENO_VALUE</link>(fd);
<anchor xml:id="_vfs_8c_source_1l00369"/>00369 }
<anchor xml:id="_vfs_8c_source_1l00370"/>00370 
<anchor xml:id="_vfs_8c_source_1l00371"/>00371 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;_assign_dir_descriptor(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00372"/>00372 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00373"/>00373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(max_dir_descriptor&#32;==&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00374"/>00374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_dir_descriptor&#32;=&#32;2;
<anchor xml:id="_vfs_8c_source_1l00375"/>00375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir_descriptor&#32;=&#32;calloc(max_dir_descriptor,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structdir__descriptor__t">dir_descriptor_t</link>));
<anchor xml:id="_vfs_8c_source_1l00376"/>00376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dir_descriptor&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;_opendir:&#32;Out&#32;of&#32;memory\n&quot;</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00379"/>00379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00380"/>00380 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00381"/>00381 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;max_dir_descriptor;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00382"/>00382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dir_descriptor[i].<link linkend="_structfilesystem">filesystem</link>&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00383"/>00383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fd&#32;=&#32;i;
<anchor xml:id="_vfs_8c_source_1l00384"/>00384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00385"/>00385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00386"/>00386 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00387"/>00387 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fd&#32;==&#32;-1)&#32;{
<anchor xml:id="_vfs_8c_source_1l00388"/>00388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extend&#32;the&#32;management&#32;array</emphasis>
<anchor xml:id="_vfs_8c_source_1l00389"/>00389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;last_max&#32;=&#32;max_dir_descriptor;
<anchor xml:id="_vfs_8c_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;max_dir_descriptor&#32;*=&#32;2;
<anchor xml:id="_vfs_8c_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir_descriptor&#32;=&#32;realloc(dir_descriptor,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structdir__descriptor__t">dir_descriptor_t</link>)&#32;*&#32;max_dir_descriptor);
<anchor xml:id="_vfs_8c_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dir_descriptor&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;_opendir:&#32;Out&#32;of&#32;memory\n&quot;</emphasis>);
<anchor xml:id="_vfs_8c_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_vfs_8c_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;last_max;&#32;i&#32;&lt;&#32;max_dir_descriptor;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir_descriptor[i].filesystem&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir_descriptor[i].dir&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fd&#32;=&#32;(int)last_max;
<anchor xml:id="_vfs_8c_source_1l00401"/>00401 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00402"/>00402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;fd;
<anchor xml:id="_vfs_8c_source_1l00403"/>00403 }
<anchor xml:id="_vfs_8c_source_1l00404"/>00404 
<anchor xml:id="_vfs_8c_source_1l00405"/><link linkend="_vfs_8c_1aeea6b1ce10c4ced8db50f44cb6774b01">00405</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1aeea6b1ce10c4ced8db50f44cb6774b01">_open</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path,&#32;<emphasis role="keywordtype">int</emphasis>&#32;oflags,&#32;...)&#32;{
<anchor xml:id="_vfs_8c_source_1l00406"/>00406 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00407"/>00407 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00408"/>00408 
<anchor xml:id="_vfs_8c_source_1l00409"/>00409 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00410"/>00410 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00413"/>00413 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00414"/>00414 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00415"/>00415 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;file&#32;descriptor</emphasis>
<anchor xml:id="_vfs_8c_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;_assign_file_descriptor();
<anchor xml:id="_vfs_8c_source_1l00417"/>00417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fd&#32;==&#32;-1)&#32;{
<anchor xml:id="_vfs_8c_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENFILE);
<anchor xml:id="_vfs_8c_source_1l00420"/>00420 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00421"/>00421 
<anchor xml:id="_vfs_8c_source_1l00422"/>00422 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00423"/>00423 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fd)].file&#32;=&#32;calloc(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structfs__file__t">fs_file_t</link>));
<anchor xml:id="_vfs_8c_source_1l00424"/>00424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(file&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00425"/>00425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00426"/>00426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-ENOMEM);
<anchor xml:id="_vfs_8c_source_1l00427"/>00427 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00428"/>00428 
<anchor xml:id="_vfs_8c_source_1l00429"/>00429 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a28f1a1f90cf5c05660e20b20e55cf1c7">file_open</link>(fs,&#32;file,&#32;entity_path,&#32;oflags);
<anchor xml:id="_vfs_8c_source_1l00430"/>00430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;&lt;&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00431"/>00431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(file);
<anchor xml:id="_vfs_8c_source_1l00432"/>00432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fd)].file&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00435"/>00435 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00436"/>00436 &#32;&#32;&#32;&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fd)].filesystem&#32;=&#32;fs;
<anchor xml:id="_vfs_8c_source_1l00437"/>00437 &#32;&#32;&#32;&#32;strncpy(file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fd)].path,&#32;path,&#32;<link linkend="_filesystem_8h_1ae688d728e1acdfe5988c7db45d6f0166">PATH_MAX</link>);
<anchor xml:id="_vfs_8c_source_1l00438"/>00438 
<anchor xml:id="_vfs_8c_source_1l00439"/>00439 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00440"/>00440 
<anchor xml:id="_vfs_8c_source_1l00441"/>00441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(fd);
<anchor xml:id="_vfs_8c_source_1l00442"/>00442 }
<anchor xml:id="_vfs_8c_source_1l00443"/>00443 
<anchor xml:id="_vfs_8c_source_1l00444"/><link linkend="_vfs_8c_1a5af2dad9b50913a0025ea80a8577bea8">00444</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a5af2dad9b50913a0025ea80a8577bea8">_close</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes)&#32;{
<anchor xml:id="_vfs_8c_source_1l00445"/>00445 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00446"/>00446 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00447"/>00447 
<anchor xml:id="_vfs_8c_source_1l00448"/>00448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;_close&#32;error&#32;fildes=%d\n&quot;</emphasis>,&#32;fildes);
<anchor xml:id="_vfs_8c_source_1l00450"/>00450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00452"/>00452 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00453"/>00453 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00455"/>00455 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00457"/>00457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00458"/>00458 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00459"/>00459 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1ab649defbea72289a00b64b6eabdd1b4d">file_close</link>(fs,&#32;file);
<anchor xml:id="_vfs_8c_source_1l00460"/>00460 &#32;&#32;&#32;&#32;free(file);
<anchor xml:id="_vfs_8c_source_1l00461"/>00461 &#32;&#32;&#32;&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00462"/>00462 &#32;&#32;&#32;&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00463"/>00463 &#32;&#32;&#32;&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].path[0]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00464"/>00464 
<anchor xml:id="_vfs_8c_source_1l00465"/>00465 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00466"/>00466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00467"/>00467 }
<anchor xml:id="_vfs_8c_source_1l00468"/>00468 
<anchor xml:id="_vfs_8c_source_1l00469"/>00469 
<anchor xml:id="_vfs_8c_source_1l00470"/><link linkend="_vfs_8c_1a90927805d6b48285139ab31098623df1">00470</link> <emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_vfs_8c_1a90927805d6b48285139ab31098623df1">stdio_flush</link>(<emphasis role="keywordtype">void</emphasis>);&#32;&#32;<emphasis role="comment">//&#32;from&#32;pico_stdio/stcio.c</emphasis>
<anchor xml:id="_vfs_8c_source_1l00471"/>00471 
<anchor xml:id="_vfs_8c_source_1l00472"/>00472 <emphasis role="comment">//&#32;_write&#32;to&#32;STDOUT_FILENO&#32;and&#32;STDERR_FILENO&#32;falls&#32;back&#32;to&#32;`putchar`&#32;in&#32;the&#32;pico_stdio&#32;library</emphasis>
<anchor xml:id="_vfs_8c_source_1l00473"/>00473 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pico_stdio_fallback_write(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nbyte)&#32;{
<anchor xml:id="_vfs_8c_source_1l00474"/>00474 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*out&#32;=&#32;buf;
<anchor xml:id="_vfs_8c_source_1l00475"/>00475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;nbyte;&#32;i++)&#32;{
<anchor xml:id="_vfs_8c_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;putchar(out[i]);
<anchor xml:id="_vfs_8c_source_1l00477"/>00477 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00478"/>00478 &#32;&#32;&#32;&#32;<link linkend="_vfs_8c_1a90927805d6b48285139ab31098623df1">stdio_flush</link>();
<anchor xml:id="_vfs_8c_source_1l00479"/>00479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nbyte;
<anchor xml:id="_vfs_8c_source_1l00480"/>00480 }
<anchor xml:id="_vfs_8c_source_1l00481"/>00481 
<anchor xml:id="_vfs_8c_source_1l00482"/>00482 <emphasis role="comment">//&#32;_read&#32;to&#32;STDIN_FILENO&#32;fall&#32;back&#32;to&#32;`getchar`&#32;in&#32;the&#32;pico_stdio&#32;library</emphasis>
<anchor xml:id="_vfs_8c_source_1l00483"/>00483 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pico_stdio_fallback_read(<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nbyte)&#32;{
<anchor xml:id="_vfs_8c_source_1l00484"/>00484 &#32;&#32;&#32;&#32;(void)buf;
<anchor xml:id="_vfs_8c_source_1l00485"/>00485 &#32;&#32;&#32;&#32;(void)nbyte;
<anchor xml:id="_vfs_8c_source_1l00486"/>00486 
<anchor xml:id="_vfs_8c_source_1l00487"/>00487 &#32;&#32;&#32;&#32;uint8_t&#32;*in&#32;=&#32;buf;
<anchor xml:id="_vfs_8c_source_1l00488"/>00488 &#32;&#32;&#32;&#32;in[0]&#32;=&#32;getchar();
<anchor xml:id="_vfs_8c_source_1l00489"/>00489 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;1;
<anchor xml:id="_vfs_8c_source_1l00490"/>00490 }
<anchor xml:id="_vfs_8c_source_1l00491"/>00491 
<anchor xml:id="_vfs_8c_source_1l00492"/><link linkend="_vfs_8c_1a637f3b33cf8a2223862596efdee3ad33">00492</link> ssize_t&#32;<link linkend="_vfs_8c_1a637f3b33cf8a2223862596efdee3ad33">_write</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nbyte)&#32;{
<anchor xml:id="_vfs_8c_source_1l00493"/>00493 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00494"/>00494 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00495"/>00495 
<anchor xml:id="_vfs_8c_source_1l00496"/>00496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fildes&#32;==&#32;STDOUT_FILENO&#32;||&#32;fildes&#32;==&#32;STDERR_FILENO)&#32;{
<anchor xml:id="_vfs_8c_source_1l00497"/>00497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pico_stdio_fallback_write(buf,&#32;nbyte);
<anchor xml:id="_vfs_8c_source_1l00498"/>00498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00499"/>00499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(ssize_t)nbyte;
<anchor xml:id="_vfs_8c_source_1l00500"/>00500 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00501"/>00501 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00503"/>00503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00504"/>00504 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00505"/>00505 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00506"/>00506 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00507"/>00507 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00508"/>00508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00509"/>00509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00510"/>00510 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00511"/>00511 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00512"/>00512 
<anchor xml:id="_vfs_8c_source_1l00513"/>00513 &#32;&#32;&#32;&#32;ssize_t&#32;size&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1aa101ba0e335b6b94b615cd27edbef29f">file_write</link>(fs,&#32;file,&#32;buf,&#32;nbyte);
<anchor xml:id="_vfs_8c_source_1l00514"/>00514 
<anchor xml:id="_vfs_8c_source_1l00515"/>00515 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(size);
<anchor xml:id="_vfs_8c_source_1l00516"/>00516 }
<anchor xml:id="_vfs_8c_source_1l00517"/>00517 
<anchor xml:id="_vfs_8c_source_1l00518"/><link linkend="_vfs_8c_1a6cfdb1d41006cb00b54a113c28dd3ab3">00518</link> ssize_t&#32;<link linkend="_vfs_8c_1a6cfdb1d41006cb00b54a113c28dd3ab3">_read</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes,&#32;<emphasis role="keywordtype">void</emphasis>&#32;*buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nbyte)&#32;{
<anchor xml:id="_vfs_8c_source_1l00519"/>00519 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00520"/>00520 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00521"/>00521 
<anchor xml:id="_vfs_8c_source_1l00522"/>00522 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fildes&#32;==&#32;STDIN_FILENO)&#32;{
<anchor xml:id="_vfs_8c_source_1l00523"/>00523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;read_bytes&#32;=&#32;pico_stdio_fallback_read(buf,&#32;nbyte);
<anchor xml:id="_vfs_8c_source_1l00524"/>00524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00525"/>00525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;read_bytes;
<anchor xml:id="_vfs_8c_source_1l00526"/>00526 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00527"/>00527 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00528"/>00528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00529"/>00529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00530"/>00530 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00531"/>00531 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00532"/>00532 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00533"/>00533 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00534"/>00534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00535"/>00535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00536"/>00536 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00537"/>00537 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00538"/>00538 
<anchor xml:id="_vfs_8c_source_1l00539"/>00539 &#32;&#32;&#32;&#32;ssize_t&#32;size&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1afa641bc200d34300f3306a7f2b1c0794">file_read</link>(fs,&#32;file,&#32;buf,&#32;nbyte);
<anchor xml:id="_vfs_8c_source_1l00540"/>00540 
<anchor xml:id="_vfs_8c_source_1l00541"/>00541 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(size);
<anchor xml:id="_vfs_8c_source_1l00542"/>00542 }
<anchor xml:id="_vfs_8c_source_1l00543"/>00543 
<anchor xml:id="_vfs_8c_source_1l00544"/><link linkend="_vfs_8c_1a1fd116a5c6d658acbe5e5786fa3e1868">00544</link> off_t&#32;<link linkend="_vfs_8c_1a1fd116a5c6d658acbe5e5786fa3e1868">_lseek</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes,&#32;off_t&#32;offset,&#32;<emphasis role="keywordtype">int</emphasis>&#32;whence)&#32;{
<anchor xml:id="_vfs_8c_source_1l00545"/>00545 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00546"/>00546 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00547"/>00547 
<anchor xml:id="_vfs_8c_source_1l00548"/>00548 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00549"/>00549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00550"/>00550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00551"/>00551 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00552"/>00552 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00553"/>00553 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00554"/>00554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00555"/>00555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00556"/>00556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00557"/>00557 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00558"/>00558 
<anchor xml:id="_vfs_8c_source_1l00559"/>00559 &#32;&#32;&#32;&#32;off_t&#32;pos&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a42ee5c83a7fe9edddb0181f9b54d7b00">file_seek</link>(fs,&#32;file,&#32;offset,&#32;whence);
<anchor xml:id="_vfs_8c_source_1l00560"/>00560 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00561"/>00561 
<anchor xml:id="_vfs_8c_source_1l00562"/>00562 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(pos);
<anchor xml:id="_vfs_8c_source_1l00563"/>00563 }
<anchor xml:id="_vfs_8c_source_1l00564"/>00564 
<anchor xml:id="_vfs_8c_source_1l00565"/><link linkend="_vfs_8c_1a9aedef60c47f7d3a05512b2a488c1d7d">00565</link> off_t&#32;<link linkend="_vfs_8c_1a9aedef60c47f7d3a05512b2a488c1d7d">_ftello_r</link>(<emphasis role="keyword">struct</emphasis>&#32;_reent&#32;*ptr,&#32;<emphasis role="keyword">register</emphasis>&#32;FILE&#32;*fp)&#32;{
<anchor xml:id="_vfs_8c_source_1l00566"/>00566 &#32;&#32;&#32;&#32;(void)ptr;
<anchor xml:id="_vfs_8c_source_1l00567"/>00567 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fildes&#32;=&#32;fp-&gt;_file;
<anchor xml:id="_vfs_8c_source_1l00568"/>00568 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00569"/>00569 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00570"/>00570 
<anchor xml:id="_vfs_8c_source_1l00571"/>00571 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00572"/>00572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00573"/>00573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00574"/>00574 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00575"/>00575 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00576"/>00576 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00577"/>00577 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00578"/>00578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00579"/>00579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00580"/>00580 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00581"/>00581 
<anchor xml:id="_vfs_8c_source_1l00582"/>00582 &#32;&#32;&#32;&#32;off_t&#32;pos&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1acdf7fe4f2c1ef87fc1f2894cf473d271">file_tell</link>(fs,&#32;file);
<anchor xml:id="_vfs_8c_source_1l00583"/>00583 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00584"/>00584 
<anchor xml:id="_vfs_8c_source_1l00585"/>00585 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(pos);
<anchor xml:id="_vfs_8c_source_1l00586"/>00586 }
<anchor xml:id="_vfs_8c_source_1l00587"/>00587 
<anchor xml:id="_vfs_8c_source_1l00588"/><link linkend="_vfs_8c_1a30e12ed09db8f77b0b4e7ffc5f1f609b">00588</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1a30e12ed09db8f77b0b4e7ffc5f1f609b">ftruncate</link>(<emphasis role="keywordtype">int</emphasis>&#32;fildes,&#32;off_t&#32;length)&#32;{
<anchor xml:id="_vfs_8c_source_1l00589"/>00589 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00590"/>00590 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00591"/>00591 
<anchor xml:id="_vfs_8c_source_1l00592"/>00592 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!is_valid_file_descriptor(fildes))&#32;{
<anchor xml:id="_vfs_8c_source_1l00593"/>00593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00594"/>00594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00595"/>00595 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00596"/>00596 &#32;&#32;&#32;&#32;<link linkend="_structfs__file__t">fs_file_t</link>&#32;*file&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].file;
<anchor xml:id="_vfs_8c_source_1l00597"/>00597 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;file_descriptor[<link linkend="_vfs_8c_1a21683c936cc59a04b06c1fd39c40b7df">FILENO_INDEX</link>(fildes)].filesystem;
<anchor xml:id="_vfs_8c_source_1l00598"/>00598 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00599"/>00599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00600"/>00600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00601"/>00601 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00602"/>00602 
<anchor xml:id="_vfs_8c_source_1l00603"/>00603 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a1318c5761c315dc5354e5154aae7d0f3">file_truncate</link>(fs,&#32;file,&#32;length);
<anchor xml:id="_vfs_8c_source_1l00604"/>00604 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00605"/>00605 
<anchor xml:id="_vfs_8c_source_1l00606"/>00606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00607"/>00607 }
<anchor xml:id="_vfs_8c_source_1l00608"/>00608 
<anchor xml:id="_vfs_8c_source_1l00609"/><link linkend="_vfs_8c_1ad759a0269427a564f3ce672d43e885cf">00609</link> <link linkend="_dirent_8h_1ae7917177082ed5bb5a50a36bcc72a5a1">DIR</link>&#32;*<link linkend="_vfs_8c_1ad759a0269427a564f3ce672d43e885cf">opendir</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*path)&#32;{
<anchor xml:id="_vfs_8c_source_1l00610"/>00610 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00611"/>00611 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00612"/>00612 
<anchor xml:id="_vfs_8c_source_1l00613"/>00613 &#32;&#32;&#32;&#32;<link linkend="_structmountpoint__t">mountpoint_t</link>&#32;*mp&#32;=&#32;find_mountpoint(path);
<anchor xml:id="_vfs_8c_source_1l00614"/>00614 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mp&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00615"/>00615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(-ENOENT);
<anchor xml:id="_vfs_8c_source_1l00616"/>00616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00617"/>00617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00618"/>00618 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00619"/>00619 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*entity_path&#32;=&#32;remove_prefix(path,&#32;mp-&gt;<link linkend="_structmountpoint__t_1ab8b25dab2ca0301ce0190df5f4efff0d">dir</link>);
<anchor xml:id="_vfs_8c_source_1l00620"/>00620 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;find&#32;dir&#32;descriptor</emphasis>
<anchor xml:id="_vfs_8c_source_1l00621"/>00621 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;_assign_dir_descriptor();
<anchor xml:id="_vfs_8c_source_1l00622"/>00622 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fd&#32;==&#32;-1)&#32;{
<anchor xml:id="_vfs_8c_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(-ENFILE);
<anchor xml:id="_vfs_8c_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00626"/>00626 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00627"/>00627 
<anchor xml:id="_vfs_8c_source_1l00628"/>00628 &#32;&#32;&#32;&#32;<link linkend="_structfs__dir__t">fs_dir_t</link>&#32;*dir&#32;=&#32;dir_descriptor[fd].dir&#32;=&#32;calloc(1,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structfs__dir__t">fs_dir_t</link>));
<anchor xml:id="_vfs_8c_source_1l00629"/>00629 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dir&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00630"/>00630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(-ENOMEM);
<anchor xml:id="_vfs_8c_source_1l00631"/>00631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00632"/>00632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00633"/>00633 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00634"/>00634 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;mp-&gt;<link linkend="_structmountpoint__t_1a0e33cd9afdf66cdf0417e94e6580d723">filesystem</link>;
<anchor xml:id="_vfs_8c_source_1l00635"/>00635 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a85af88c13c623c820eca217dd81c2a2a">dir_open</link>(fs,&#32;dir,&#32;entity_path);
<anchor xml:id="_vfs_8c_source_1l00636"/>00636 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;!=&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00637"/>00637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(dir);
<anchor xml:id="_vfs_8c_source_1l00638"/>00638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dir_descriptor[fd].dir&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00639"/>00639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00640"/>00640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00641"/>00641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00642"/>00642 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00643"/>00643 &#32;&#32;&#32;&#32;dir_descriptor[fd].filesystem&#32;=&#32;fs;
<anchor xml:id="_vfs_8c_source_1l00644"/>00644 &#32;&#32;&#32;&#32;dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>&#32;=&#32;fd;
<anchor xml:id="_vfs_8c_source_1l00645"/>00645 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00646"/>00646 
<anchor xml:id="_vfs_8c_source_1l00647"/>00647 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dir;
<anchor xml:id="_vfs_8c_source_1l00648"/>00648 }
<anchor xml:id="_vfs_8c_source_1l00649"/>00649 
<anchor xml:id="_vfs_8c_source_1l00650"/><link linkend="_vfs_8c_1ac0258906f9453b8abf03e945aa9c9676">00650</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_vfs_8c_1ac0258906f9453b8abf03e945aa9c9676">closedir</link>(<link linkend="_dirent_8h_1ae7917177082ed5bb5a50a36bcc72a5a1">DIR</link>&#32;*dir)&#32;{
<anchor xml:id="_vfs_8c_source_1l00651"/>00651 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00652"/>00652 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00653"/>00653 
<anchor xml:id="_vfs_8c_source_1l00654"/>00654 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>;
<anchor xml:id="_vfs_8c_source_1l00655"/>00655 &#32;&#32;&#32;&#32;<link linkend="_structfs__dir__t">fs_dir_t</link>&#32;*_dir&#32;=&#32;dir_descriptor[dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>].dir;
<anchor xml:id="_vfs_8c_source_1l00656"/>00656 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;dir_descriptor[dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>].filesystem;
<anchor xml:id="_vfs_8c_source_1l00657"/>00657 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00658"/>00658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00659"/>00659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00660"/>00660 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00661"/>00661 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a537d71bf313451145ca593fe2a63d728">dir_close</link>(fs,&#32;_dir);
<anchor xml:id="_vfs_8c_source_1l00662"/>00662 &#32;&#32;&#32;&#32;dir_descriptor[fd].filesystem&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00663"/>00663 &#32;&#32;&#32;&#32;free(dir_descriptor[fd].dir);
<anchor xml:id="_vfs_8c_source_1l00664"/>00664 &#32;&#32;&#32;&#32;dir_descriptor[fd].dir&#32;=&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00665"/>00665 &#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00666"/>00666 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00667"/>00667 }
<anchor xml:id="_vfs_8c_source_1l00668"/>00668 
<anchor xml:id="_vfs_8c_source_1l00669"/><link linkend="_vfs_8c_1ab1ebcf210f49b305423bcc413c6427ee">00669</link> <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structdirent">dirent</link>&#32;*<link linkend="_vfs_8c_1ab1ebcf210f49b305423bcc413c6427ee">readdir</link>(<link linkend="_dirent_8h_1ae7917177082ed5bb5a50a36bcc72a5a1">DIR</link>&#32;*dir)&#32;{
<anchor xml:id="_vfs_8c_source_1l00670"/>00670 &#32;&#32;&#32;&#32;auto_init_recursive_mutex(_mutex);
<anchor xml:id="_vfs_8c_source_1l00671"/>00671 &#32;&#32;&#32;&#32;recursive_mutex_enter_blocking(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00672"/>00672 
<anchor xml:id="_vfs_8c_source_1l00673"/>00673 &#32;&#32;&#32;&#32;<link linkend="_structfs__dir__t">fs_dir_t</link>&#32;*_dir&#32;=&#32;dir_descriptor[dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>].dir;
<anchor xml:id="_vfs_8c_source_1l00674"/>00674 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gad16024c6aa37d328b78a38f8c006ac83">filesystem_t</link>&#32;*fs&#32;=&#32;dir_descriptor[dir-&gt;<link linkend="_structfs__dir__t_1a9778c8a1393e7166c1e655c9ed0a829e">fd</link>].filesystem;
<anchor xml:id="_vfs_8c_source_1l00675"/>00675 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fs&#32;==&#32;NULL)&#32;{
<anchor xml:id="_vfs_8c_source_1l00676"/>00676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(-EBADF);
<anchor xml:id="_vfs_8c_source_1l00677"/>00677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00678"/>00678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00679"/>00679 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00680"/>00680 &#32;&#32;&#32;&#32;memset(&amp;_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>));
<anchor xml:id="_vfs_8c_source_1l00681"/>00681 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;err&#32;=&#32;fs-&gt;<link linkend="_structfilesystem_1a36cd5c106f4d8a95cdf1ee4a73052001">dir_read</link>(fs,&#32;_dir,&#32;&amp;_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>);
<anchor xml:id="_vfs_8c_source_1l00682"/>00682 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;==&#32;0)&#32;{
<anchor xml:id="_vfs_8c_source_1l00683"/>00683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00684"/>00684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;&amp;_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>;
<anchor xml:id="_vfs_8c_source_1l00685"/>00685 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(err&#32;==&#32;-ENOENT)&#32;{
<anchor xml:id="_vfs_8c_source_1l00686"/>00686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>));
<anchor xml:id="_vfs_8c_source_1l00687"/>00687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(0);
<anchor xml:id="_vfs_8c_source_1l00688"/>00688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00689"/>00689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00690"/>00690 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_vfs_8c_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(_dir-&gt;<link linkend="_structfs__dir__t_1aedd8474e43c6a35c6caed6c2469de4c5">current</link>));
<anchor xml:id="_vfs_8c_source_1l00692"/>00692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_error_remap(err);
<anchor xml:id="_vfs_8c_source_1l00693"/>00693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;recursive_mutex_exit(&amp;_mutex);
<anchor xml:id="_vfs_8c_source_1l00694"/>00694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_vfs_8c_source_1l00695"/>00695 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00696"/>00696 }
<anchor xml:id="_vfs_8c_source_1l00697"/>00697 
<anchor xml:id="_vfs_8c_source_1l00698"/><link linkend="_group__filesystem_1ga852f1a8efec7c0556f59cdb951ab96c4">00698</link> <emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_group__filesystem_1ga852f1a8efec7c0556f59cdb951ab96c4">fs_strerror</link>(<emphasis role="keywordtype">int</emphasis>&#32;errnum)&#32;{
<anchor xml:id="_vfs_8c_source_1l00699"/>00699 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errnum&#32;&gt;&#32;5000)&#32;{
<anchor xml:id="_vfs_8c_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;SD&#32;blockdevice&#32;error</emphasis>
<anchor xml:id="_vfs_8c_source_1l00701"/>00701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00702"/>00702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(errnum)&#32;{
<anchor xml:id="_vfs_8c_source_1l00703"/>00703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5001:
<anchor xml:id="_vfs_8c_source_1l00704"/>00704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;operation&#32;would&#32;block&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00705"/>00705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00706"/>00706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5002:
<anchor xml:id="_vfs_8c_source_1l00707"/>00707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;unsupported&#32;operation&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00708"/>00708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00709"/>00709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5003:
<anchor xml:id="_vfs_8c_source_1l00710"/>00710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;invalid&#32;parameter&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00711"/>00711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00712"/>00712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5004:
<anchor xml:id="_vfs_8c_source_1l00713"/>00713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;uninitialized&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00714"/>00714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00715"/>00715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5005:
<anchor xml:id="_vfs_8c_source_1l00716"/>00716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;device&#32;is&#32;missing&#32;or&#32;not&#32;connected&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00717"/>00717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00718"/>00718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5006:
<anchor xml:id="_vfs_8c_source_1l00719"/>00719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;write&#32;protected&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00720"/>00720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00721"/>00721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5007:
<anchor xml:id="_vfs_8c_source_1l00722"/>00722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;unusable&#32;card&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00723"/>00723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00724"/>00724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5008:
<anchor xml:id="_vfs_8c_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;No&#32;response&#32;from&#32;device&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00727"/>00727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5009:
<anchor xml:id="_vfs_8c_source_1l00728"/>00728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;CRC&#32;error&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00729"/>00729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00730"/>00730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5010:
<anchor xml:id="_vfs_8c_source_1l00731"/>00731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Erase&#32;error:&#32;reset/sequence&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00732"/>00732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00733"/>00733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5011:
<anchor xml:id="_vfs_8c_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;Write&#32;error:&#32;!SPI_DATA_ACCEPTED&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00735"/>00735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00736"/>00736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_vfs_8c_source_1l00737"/>00737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00738"/>00738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00739"/>00739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)str;
<anchor xml:id="_vfs_8c_source_1l00740"/>00740 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errnum&#32;&gt;&#32;4000)&#32;{
<anchor xml:id="_vfs_8c_source_1l00741"/>00741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On-board&#32;flash&#32;blockdevice&#32;error</emphasis>
<anchor xml:id="_vfs_8c_source_1l00742"/>00742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*str&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00743"/>00743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(errnum)&#32;{
<anchor xml:id="_vfs_8c_source_1l00744"/>00744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4001:
<anchor xml:id="_vfs_8c_source_1l00745"/>00745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;operation&#32;timeout&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00747"/>00747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4002:
<anchor xml:id="_vfs_8c_source_1l00748"/>00748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;safe&#32;execution&#32;is&#32;not&#32;possible&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00749"/>00749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00750"/>00750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4003:
<anchor xml:id="_vfs_8c_source_1l00751"/>00751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;str&#32;=&#32;<emphasis role="stringliteral">&quot;method&#32;fails&#32;due&#32;to&#32;dynamic&#32;resource&#32;exhaustion&quot;</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00752"/>00752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00753"/>00753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_vfs_8c_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_vfs_8c_source_1l00755"/>00755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00756"/>00756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keywordtype">char</emphasis>&#32;*)str;
<anchor xml:id="_vfs_8c_source_1l00757"/>00757 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_vfs_8c_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;strerror(errnum);
<anchor xml:id="_vfs_8c_source_1l00759"/>00759 &#32;&#32;&#32;&#32;}
<anchor xml:id="_vfs_8c_source_1l00760"/>00760 }
<anchor xml:id="_vfs_8c_source_1l00761"/>00761 
<anchor xml:id="_vfs_8c_source_1l00762"/>00762 <emphasis role="preprocessor">#if&#32;defined(PICO_FS_AUTO_INIT)</emphasis>
<anchor xml:id="_vfs_8c_source_1l00763"/>00763 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_src_2filesystem_2fs__init_8c_1acdc7c707257b149d05bc7b779c55867c">__attribute__</link>((constructor))&#32;pre_main(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_vfs_8c_source_1l00764"/>00764 &#32;&#32;&#32;&#32;<link linkend="_group__filesystem_1gafb19e37469a751aa61de3dcd0c70b4b0">fs_init</link>();
<anchor xml:id="_vfs_8c_source_1l00765"/>00765 }
<anchor xml:id="_vfs_8c_source_1l00766"/>00766 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
